{
  "openapi": "3.0.3",
  "info": {
    "title": "Edulure Platform API",
    "version": "1.50.0",
    "description": "Production-ready API contracts for the Edulure platform. All responses follow the `{ success, message, data, meta }` envelope."
  },
  "servers": [
    {
      "url": "https://api.edulure.com/api/v1",
      "description": "Production"
    },
    {
      "url": "http://localhost:{port}/api/v1",
      "description": "Local development",
      "variables": {
        "port": {
          "default": "4000"
        }
      }
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "StandardResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "data": {},
          "meta": {
            "type": "object",
            "nullable": true
          }
        }
      },
      "DashboardMetric": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "change": {
            "type": "string",
            "nullable": true
          },
          "trend": {
            "type": "string",
            "enum": [
              "up",
              "down"
            ],
            "nullable": true
          }
        },
        "required": [
          "label",
          "value"
        ]
      },
      "DashboardLearningPaceEntry": {
        "type": "object",
        "properties": {
          "day": {
            "type": "string"
          },
          "minutes": {
            "type": "number"
          }
        },
        "required": [
          "day",
          "minutes"
        ]
      },
      "DashboardCommunityEngagementEntry": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "participation": {
            "type": "number"
          }
        },
        "required": [
          "name",
          "participation"
        ]
      },
      "DashboardUpcomingItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "date": {
            "type": "string"
          },
          "host": {
            "type": "string",
            "nullable": true
          },
          "action": {
            "type": "string",
            "nullable": true
          },
          "dateLabel": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "id",
          "title",
          "type",
          "date"
        ]
      },
      "DashboardCommunitySummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "members": {
            "type": "string"
          },
          "moderators": {
            "type": "integer"
          },
          "health": {
            "type": "string"
          },
          "initiatives": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          }
        },
        "required": [
          "id",
          "name",
          "members",
          "moderators",
          "health",
          "initiatives"
        ]
      },
      "DashboardPipelineItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "progress": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "title",
          "owner",
          "progress"
        ]
      },
      "DashboardCourseSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "progress": {
            "type": "number"
          },
          "instructor": {
            "type": "string"
          },
          "nextLesson": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "id",
          "title",
          "status",
          "progress",
          "instructor"
        ]
      },
      "DashboardCalendarDay": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "day": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "day",
          "items"
        ]
      },
      "DashboardTutorBooking": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "topic": {
            "type": "string"
          },
          "mentor": {
            "type": "string"
          },
          "date": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "id",
          "topic",
          "mentor",
          "date"
        ]
      },
      "DashboardEbookEntry": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "progress": {
            "type": "number"
          },
          "price": {
            "type": "string"
          },
          "highlights": {
            "type": "integer"
          },
          "bookmarks": {
            "type": "integer"
          },
          "timeSpent": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "title",
          "status",
          "progress",
          "price"
        ]
      },
      "DashboardFinancialSummaryItem": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "change": {
            "type": "string",
            "nullable": true
          },
          "trend": {
            "type": "string",
            "enum": [
              "up",
              "down"
            ],
            "nullable": true
          }
        },
        "required": [
          "label",
          "value"
        ]
      },
      "DashboardInvoice": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "date": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "label",
          "amount",
          "status",
          "date"
        ]
      },
      "DashboardNotification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "title",
          "timestamp",
          "type"
        ]
      },
      "DashboardFollowerRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "requestedAt": {
            "type": "string",
            "nullable": true
          },
          "score": {
            "type": "number",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "DashboardPrivacySettings": {
        "type": "object",
        "properties": {
          "visibility": {
            "type": "string"
          },
          "followApprovalRequired": {
            "type": "boolean"
          },
          "shareActivity": {
            "type": "boolean"
          },
          "messagePermission": {
            "type": "string"
          }
        },
        "required": [
          "visibility",
          "followApprovalRequired",
          "shareActivity",
          "messagePermission"
        ]
      },
      "DashboardMessagingSettings": {
        "type": "object",
        "properties": {
          "unreadThreads": {
            "type": "integer"
          },
          "notificationsEnabled": {
            "type": "boolean"
          }
        },
        "required": [
          "unreadThreads",
          "notificationsEnabled"
        ]
      },
      "DashboardCommunitySetting": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "role",
          "status"
        ]
      },
      "DashboardSettings": {
        "type": "object",
        "properties": {
          "privacy": {
            "$ref": "#/components/schemas/DashboardPrivacySettings"
          },
          "messaging": {
            "$ref": "#/components/schemas/DashboardMessagingSettings"
          },
          "communities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardCommunitySetting"
            }
          }
        },
        "required": [
          "privacy",
          "messaging",
          "communities"
        ]
      },
      "DashboardLearner": {
        "type": "object",
        "properties": {
          "metrics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardMetric"
            }
          },
          "analytics": {
            "type": "object",
            "properties": {
              "learningPace": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DashboardLearningPaceEntry"
                }
              },
              "communityEngagement": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DashboardCommunityEngagementEntry"
                }
              }
            },
            "required": [
              "learningPace",
              "communityEngagement"
            ]
          },
          "upcoming": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardUpcomingItem"
            }
          },
          "communities": {
            "type": "object",
            "properties": {
              "managed": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DashboardCommunitySummary"
                }
              },
              "pipelines": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DashboardPipelineItem"
                }
              }
            },
            "required": [
              "managed",
              "pipelines"
            ]
          },
          "courses": {
            "type": "object",
            "properties": {
              "active": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DashboardCourseSummary"
                }
              },
              "recommendations": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "title": {
                      "type": "string"
                    },
                    "summary": {
                      "type": "string",
                      "nullable": true
                    },
                    "rating": {
                      "type": "string",
                      "nullable": true
                    }
                  },
                  "required": [
                    "id",
                    "title"
                  ]
                }
              }
            },
            "required": [
              "active",
              "recommendations"
            ]
          },
          "calendar": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardCalendarDay"
            }
          },
          "tutorBookings": {
            "type": "object",
            "properties": {
              "active": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DashboardTutorBooking"
                }
              },
              "history": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DashboardTutorBooking"
                }
              }
            },
            "required": [
              "active",
              "history"
            ]
          },
          "ebooks": {
            "type": "object",
            "properties": {
              "library": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DashboardEbookEntry"
                }
              },
              "recommendations": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "title": {
                      "type": "string"
                    },
                    "summary": {
                      "type": "string",
                      "nullable": true
                    },
                    "rating": {
                      "type": "string",
                      "nullable": true
                    }
                  },
                  "required": [
                    "id",
                    "title"
                  ]
                }
              }
            },
            "required": [
              "library",
              "recommendations"
            ]
          },
          "financial": {
            "type": "object",
            "properties": {
              "summary": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DashboardFinancialSummaryItem"
                }
              },
              "invoices": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DashboardInvoice"
                }
              }
            },
            "required": [
              "summary",
              "invoices"
            ]
          },
          "notifications": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer"
              },
              "unreadMessages": {
                "type": "integer"
              },
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DashboardNotification"
                }
              }
            },
            "required": [
              "total",
              "unreadMessages",
              "items"
            ]
          },
          "followers": {
            "type": "object",
            "properties": {
              "followers": {
                "type": "integer"
              },
              "following": {
                "type": "integer"
              },
              "pending": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DashboardFollowerRecord"
                }
              },
              "outgoing": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DashboardFollowerRecord"
                }
              },
              "recommendations": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DashboardFollowerRecord"
                }
              }
            },
            "required": [
              "followers",
              "following",
              "pending",
              "outgoing",
              "recommendations"
            ]
          },
          "settings": {
            "$ref": "#/components/schemas/DashboardSettings"
          }
        },
        "required": [
          "metrics",
          "analytics",
          "upcoming",
          "communities",
          "courses",
          "calendar",
          "tutorBookings",
          "ebooks",
          "financial",
          "notifications",
          "followers",
          "settings"
        ]
      },
      "DashboardRole": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "label"
        ]
      },
      "DashboardSearchIndexItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "role",
          "type",
          "title",
          "url"
        ]
      },
      "DashboardProfile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "bio": {
            "type": "string"
          },
          "stats": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "label": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "required": [
                "label",
                "value"
              ]
            }
          },
          "feedHighlights": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "headline": {
                  "type": "string"
                },
                "time": {
                  "type": "string"
                },
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "reactions": {
                  "type": "integer"
                },
                "comments": {
                  "type": "integer"
                }
              },
              "required": [
                "id",
                "headline",
                "time",
                "tags",
                "reactions",
                "comments"
              ]
            }
          }
        },
        "required": [
          "id",
          "name",
          "email",
          "avatar",
          "title",
          "bio",
          "stats",
          "feedHighlights"
        ]
      },
      "DashboardResponse": {
        "type": "object",
        "properties": {
          "profile": {
            "$ref": "#/components/schemas/DashboardProfile"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardRole"
            }
          },
          "dashboards": {
            "type": "object",
            "properties": {
              "learner": {
                "$ref": "#/components/schemas/DashboardLearner"
              }
            },
            "required": [
              "learner"
            ]
          },
          "searchIndex": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardSearchIndexItem"
            }
          }
        },
        "required": [
          "profile",
          "roles",
          "dashboards",
          "searchIndex"
        ]
      },
      "CommunityChatChannel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "communityId": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "channelType": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "isDefault": {
            "type": "boolean"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "communityId",
          "name",
          "slug",
          "channelType",
          "isDefault",
          "metadata",
          "createdAt",
          "updatedAt"
        ]
      },
      "CommunityChannelMembership": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "channelId": {
            "type": "integer"
          },
          "userId": {
            "type": "integer"
          },
          "role": {
            "type": "string"
          },
          "notificationsEnabled": {
            "type": "boolean"
          },
          "muteUntil": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastReadAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastReadMessageId": {
            "type": "integer",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "channelId",
          "userId",
          "role",
          "notificationsEnabled",
          "metadata",
          "createdAt",
          "updatedAt"
        ]
      },
      "CommunityChatMessage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "communityId": {
            "type": "integer"
          },
          "channelId": {
            "type": "integer"
          },
          "authorId": {
            "type": "integer"
          },
          "messageType": {
            "type": "string",
            "enum": [
              "text",
              "system",
              "event",
              "file",
              "live"
            ],
            "default": "text"
          },
          "body": {
            "type": "string",
            "maxLength": 5000
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          },
          "status": {
            "type": "string"
          },
          "pinned": {
            "type": "boolean"
          },
          "threadRootId": {
            "type": "integer",
            "nullable": true
          },
          "replyToMessageId": {
            "type": "integer",
            "nullable": true
          },
          "deliveredAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "author": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "firstName": {
                "type": "string"
              },
              "lastName": {
                "type": "string",
                "nullable": true
              },
              "email": {
                "type": "string",
                "format": "email"
              },
              "role": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "id",
          "communityId",
          "channelId",
          "authorId",
          "messageType",
          "body",
          "attachments",
          "metadata",
          "status",
          "pinned",
          "createdAt",
          "updatedAt",
          "author"
        ]
      },
      "CommunityChatMessageExtended": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommunityChatMessage"
          },
          {
            "type": "object",
            "properties": {
              "reactions": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "emoji": {
                      "type": "string"
                    },
                    "count": {
                      "type": "integer"
                    }
                  }
                }
              },
              "viewerReactions": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "CommunityChatChannelSummary": {
        "type": "object",
        "properties": {
          "channel": {
            "$ref": "#/components/schemas/CommunityChatChannel"
          },
          "membership": {
            "$ref": "#/components/schemas/CommunityChannelMembership"
          },
          "latestMessage": {
            "$ref": "#/components/schemas/CommunityChatMessage",
            "nullable": true
          },
          "unreadCount": {
            "type": "integer"
          }
        },
        "required": [
          "channel",
          "membership",
          "unreadCount"
        ]
      },
      "CommunityChatReactionSummary": {
        "type": "object",
        "properties": {
          "messageId": {
            "type": "integer"
          },
          "reactions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "emoji": {
                  "type": "string"
                },
                "count": {
                  "type": "integer"
                }
              }
            }
          },
          "viewerReactions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "messageId",
          "reactions",
          "viewerReactions"
        ]
      },
      "CommunityChatModeration": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "messageId": {
            "type": "integer"
          },
          "actorId": {
            "type": "integer"
          },
          "actionType": {
            "type": "string"
          },
          "reason": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "messageId",
          "actorId",
          "actionType",
          "metadata",
          "createdAt"
        ]
      },
      "CommunityChatModerationResult": {
        "type": "object",
        "properties": {
          "message": {
            "$ref": "#/components/schemas/CommunityChatMessage"
          },
          "moderation": {
            "$ref": "#/components/schemas/CommunityChatModeration"
          }
        },
        "required": [
          "message",
          "moderation"
        ]
      },
      "CreateCommunityChatMessageRequest": {
        "type": "object",
        "properties": {
          "messageType": {
            "type": "string",
            "enum": [
              "text",
              "system",
              "event",
              "file",
              "live"
            ],
            "default": "text"
          },
          "body": {
            "type": "string",
            "minLength": 1,
            "maxLength": 5000
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          },
          "replyToMessageId": {
            "type": "integer",
            "minimum": 1
          },
          "threadRootId": {
            "type": "integer",
            "minimum": 1
          }
        },
        "required": [
          "body"
        ]
      },
      "CommunityChatReactionRequest": {
        "type": "object",
        "properties": {
          "emoji": {
            "type": "string",
            "minLength": 1,
            "maxLength": 40
          }
        },
        "required": [
          "emoji"
        ]
      },
      "CommunityChatModerationRequest": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "delete",
              "hide",
              "restore"
            ]
          },
          "reason": {
            "type": "string",
            "maxLength": 500
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          }
        },
        "required": [
          "action"
        ]
      },
      "CommunityChatReadReceiptRequest": {
        "type": "object",
        "properties": {
          "messageId": {
            "type": "integer",
            "minimum": 1
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "PresenceSession": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "userId": {
            "type": "integer"
          },
          "sessionId": {
            "type": "string"
          },
          "client": {
            "type": "string",
            "enum": [
              "web",
              "mobile",
              "provider",
              "admin"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "online",
              "away",
              "offline"
            ]
          },
          "connectedAt": {
            "type": "string",
            "format": "date-time"
          },
          "lastSeenAt": {
            "type": "string",
            "format": "date-time"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          }
        },
        "required": [
          "id",
          "userId",
          "sessionId",
          "client",
          "status",
          "connectedAt",
          "lastSeenAt",
          "metadata"
        ]
      },
      "PresenceUpdateRequest": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "online",
              "away",
              "offline"
            ],
            "default": "online"
          },
          "client": {
            "type": "string",
            "enum": [
              "web",
              "mobile",
              "provider",
              "admin"
            ],
            "default": "web"
          },
          "ttlMinutes": {
            "type": "integer",
            "minimum": 1,
            "maximum": 60,
            "default": 5
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          },
          "connectedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "DirectMessageParticipant": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "threadId": {
            "type": "integer"
          },
          "userId": {
            "type": "integer"
          },
          "role": {
            "type": "string"
          },
          "notificationsEnabled": {
            "type": "boolean"
          },
          "isMuted": {
            "type": "boolean"
          },
          "muteUntil": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastReadAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastReadMessageId": {
            "type": "integer",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "threadId",
          "userId",
          "role",
          "notificationsEnabled",
          "isMuted",
          "metadata",
          "createdAt",
          "updatedAt"
        ]
      },
      "DirectMessage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "threadId": {
            "type": "integer"
          },
          "senderId": {
            "type": "integer"
          },
          "messageType": {
            "type": "string",
            "enum": [
              "text",
              "system",
              "file"
            ],
            "default": "text"
          },
          "body": {
            "type": "string",
            "maxLength": 5000
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          },
          "status": {
            "type": "string"
          },
          "deliveredAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "readAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "sender": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "firstName": {
                "type": "string"
              },
              "lastName": {
                "type": "string",
                "nullable": true
              },
              "email": {
                "type": "string",
                "format": "email"
              },
              "role": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "id",
          "threadId",
          "senderId",
          "messageType",
          "body",
          "attachments",
          "metadata",
          "status",
          "createdAt",
          "updatedAt",
          "sender"
        ]
      },
      "DirectMessageThread": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "subject": {
            "type": "string",
            "nullable": true
          },
          "isGroup": {
            "type": "boolean"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          },
          "lastMessageAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastMessagePreview": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "isGroup",
          "metadata",
          "createdAt",
          "updatedAt"
        ]
      },
      "DirectMessageParticipantSummary": {
        "type": "object",
        "properties": {
          "participant": {
            "$ref": "#/components/schemas/DirectMessageParticipant"
          },
          "user": {
            "$ref": "#/components/schemas/User",
            "nullable": true
          }
        },
        "required": [
          "participant"
        ]
      },
      "DirectMessageThreadSummary": {
        "type": "object",
        "properties": {
          "thread": {
            "$ref": "#/components/schemas/DirectMessageThread"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DirectMessageParticipantSummary"
            }
          },
          "latestMessage": {
            "$ref": "#/components/schemas/DirectMessage",
            "nullable": true
          },
          "unreadCount": {
            "type": "integer"
          }
        },
        "required": [
          "thread",
          "participants",
          "unreadCount"
        ]
      },
      "DirectMessageThreadCreationResult": {
        "type": "object",
        "properties": {
          "thread": {
            "$ref": "#/components/schemas/DirectMessageThread"
          },
          "initialMessage": {
            "$ref": "#/components/schemas/DirectMessage",
            "nullable": true
          }
        },
        "required": [
          "thread"
        ]
      },
      "DirectMessageRequest": {
        "type": "object",
        "properties": {
          "messageType": {
            "type": "string",
            "enum": [
              "text",
              "system",
              "file"
            ],
            "default": "text"
          },
          "body": {
            "type": "string",
            "minLength": 1,
            "maxLength": 5000
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          }
        },
        "required": [
          "body"
        ]
      },
      "DirectMessageThreadRequest": {
        "type": "object",
        "properties": {
          "participantIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": 1
            },
            "minItems": 1
          },
          "subject": {
            "type": "string",
            "maxLength": 240
          },
          "forceNew": {
            "type": "boolean",
            "default": false
          },
          "initialMessage": {
            "$ref": "#/components/schemas/DirectMessageRequest"
          }
        },
        "required": [
          "participantIds"
        ]
      },
      "DirectMessageReadRequest": {
        "type": "object",
        "properties": {
          "messageId": {
            "type": "integer",
            "minimum": 1
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "DirectMessageReadReceipt": {
        "type": "object",
        "properties": {
          "participant": {
            "$ref": "#/components/schemas/DirectMessageParticipant"
          },
          "message": {
            "$ref": "#/components/schemas/DirectMessage",
            "nullable": true
          }
        },
        "required": [
          "participant"
        ]
      },
      "AuthTokens": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          },
          "tokenType": {
            "type": "string",
            "example": "Bearer"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "accessToken",
          "refreshToken",
          "tokenType",
          "expiresAt"
        ]
      },
      "SessionEnvelope": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastUsedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "required": [
          "id"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "role": {
            "type": "string",
            "enum": [
              "user",
              "instructor",
              "admin"
            ]
          },
          "age": {
            "type": "integer",
            "nullable": true
          },
          "address": {
            "type": "object",
            "nullable": true,
            "properties": {
              "streetAddress": {
                "type": "string",
                "description": "Primary street address line"
              },
              "addressLine2": {
                "type": "string",
                "description": "Additional street or unit information"
              },
              "town": {
                "type": "string",
                "description": "Town or village"
              },
              "city": {
                "type": "string",
                "description": "City or municipality"
              },
              "country": {
                "type": "string",
                "description": "Country or territory"
              },
              "postcode": {
                "type": "string",
                "description": "Postal or ZIP code"
              }
            }
          },
          "twoFactorEnabled": {
            "type": "boolean",
            "description": "Indicates whether multi-factor authentication is enabled for the account.",
            "default": false
          },
          "twoFactorEnrolledAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Timestamp of initial multi-factor enrollment."
          },
          "twoFactorLastVerifiedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Timestamp of the last successful multi-factor verification."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "emailVerifiedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastLoginAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "required": [
          "id",
          "firstName",
          "email",
          "role",
          "createdAt",
          "updatedAt"
        ]
      },
      "Community": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "coverImageUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "visibility": {
            "type": "string",
            "enum": [
              "public",
              "private"
            ]
          },
          "ownerId": {
            "type": "integer"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          },
          "stats": {
            "type": "object",
            "properties": {
              "members": {
                "type": "integer"
              },
              "resources": {
                "type": "integer"
              },
              "posts": {
                "type": "integer"
              },
              "channels": {
                "type": "integer"
              },
              "lastActivityAt": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            }
          },
          "membership": {
            "type": "object",
            "nullable": true,
            "properties": {
              "role": {
                "type": "string"
              },
              "status": {
                "type": "string"
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "slug",
          "visibility",
          "ownerId",
          "metadata",
          "stats",
          "createdAt",
          "updatedAt"
        ]
      },
      "CommunityChannel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "isDefault": {
            "type": "boolean"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "slug",
          "type",
          "isDefault",
          "metadata",
          "createdAt",
          "updatedAt"
        ]
      },
      "CommunityPost": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "type": {
            "type": "string"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "body": {
            "type": "string"
          },
          "publishedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "scheduledAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "visibility": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "channel": {
            "$ref": "#/components/schemas/CommunityChannel",
            "nullable": true
          },
          "community": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "slug": {
                "type": "string"
              }
            }
          },
          "author": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "role": {
                "type": "string"
              },
              "avatarUrl": {
                "type": "string",
                "format": "uri"
              }
            },
            "required": [
              "id",
              "name",
              "avatarUrl"
            ]
          },
          "stats": {
            "type": "object",
            "properties": {
              "reactions": {
                "type": "integer"
              },
              "reactionBreakdown": {
                "type": "object",
                "additionalProperties": {
                  "type": "integer"
                }
              },
              "comments": {
                "type": "integer"
              }
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          }
        },
        "required": [
          "id",
          "type",
          "body",
          "visibility",
          "status",
          "tags",
          "author",
          "stats",
          "metadata"
        ]
      },
      "CommunityResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "communityId": {
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "resourceType": {
            "type": "string"
          },
          "assetId": {
            "type": "integer",
            "nullable": true
          },
          "asset": {
            "type": "object",
            "nullable": true,
            "properties": {
              "publicId": {
                "type": "string"
              },
              "filename": {
                "type": "string"
              }
            }
          },
          "linkUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "classroomReference": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "visibility": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          },
          "publishedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "role": {
                "type": "string",
                "nullable": true
              },
              "avatarUrl": {
                "type": "string",
                "format": "uri"
              }
            },
            "required": [
              "id",
              "name",
              "avatarUrl"
            ]
          }
        },
        "required": [
          "id",
          "communityId",
          "title",
          "resourceType",
          "tags",
          "visibility",
          "status",
          "metadata",
          "createdAt",
          "updatedAt",
          "createdBy"
        ]
      },
      "CommunityDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Community"
          },
          {
            "type": "object",
            "properties": {
              "channels": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CommunityChannel"
                }
              }
            }
          }
        ]
      },
      "CommunityPointSummary": {
        "type": "object",
        "properties": {
          "communityId": {
            "type": "integer"
          },
          "userId": {
            "type": "integer"
          },
          "points": {
            "type": "integer"
          },
          "lifetimePoints": {
            "type": "integer"
          },
          "tier": {
            "type": "string"
          },
          "lastAwardedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastActivityAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "required": [
          "communityId",
          "userId",
          "points",
          "lifetimePoints",
          "tier"
        ]
      },
      "CommunityPointTransaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "communityId": {
            "type": "integer"
          },
          "userId": {
            "type": "integer"
          },
          "awardedBy": {
            "type": "integer",
            "nullable": true
          },
          "deltaPoints": {
            "type": "integer"
          },
          "balanceAfter": {
            "type": "integer"
          },
          "reason": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "referenceId": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          },
          "awardedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "communityId",
          "userId",
          "deltaPoints",
          "balanceAfter",
          "reason",
          "source",
          "metadata",
          "awardedAt"
        ]
      },
      "CommunityStreak": {
        "type": "object",
        "properties": {
          "communityId": {
            "type": "integer"
          },
          "userId": {
            "type": "integer"
          },
          "currentStreakDays": {
            "type": "integer"
          },
          "longestStreakDays": {
            "type": "integer"
          },
          "lastActiveOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "resumedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          }
        },
        "required": [
          "communityId",
          "userId",
          "currentStreakDays",
          "longestStreakDays",
          "metadata"
        ]
      },
      "CommunityPointAwardResult": {
        "type": "object",
        "properties": {
          "summary": {
            "$ref": "#/components/schemas/CommunityPointSummary"
          },
          "transaction": {
            "$ref": "#/components/schemas/CommunityPointTransaction"
          }
        },
        "required": [
          "summary",
          "transaction"
        ]
      },
      "CommunityEngagementProgress": {
        "type": "object",
        "properties": {
          "membership": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "communityId": {
                "type": "integer"
              },
              "userId": {
                "type": "integer"
              },
              "role": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "joinedAt": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "leftAt": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "metadata": {
                "type": "object",
                "additionalProperties": true
              }
            },
            "required": [
              "id",
              "communityId",
              "userId",
              "role",
              "status",
              "metadata"
            ]
          },
          "points": {
            "$ref": "#/components/schemas/CommunityPointSummary"
          },
          "streak": {
            "$ref": "#/components/schemas/CommunityStreak"
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommunityPointTransaction"
            }
          }
        },
        "required": [
          "membership",
          "points",
          "streak",
          "transactions"
        ]
      },
      "CommunityLeaderboardEntry": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "points": {
            "type": "integer",
            "nullable": true
          },
          "lifetimePoints": {
            "type": "integer",
            "nullable": true
          },
          "tier": {
            "type": "string",
            "nullable": true
          },
          "currentStreakDays": {
            "type": "integer",
            "nullable": true
          },
          "longestStreakDays": {
            "type": "integer",
            "nullable": true
          },
          "lastActiveOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "attendedEvents": {
            "type": "integer",
            "nullable": true
          },
          "waitlistedEvents": {
            "type": "integer",
            "nullable": true
          }
        },
        "required": [
          "userId",
          "name"
        ]
      },
      "CommunityEvent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "communityId": {
            "type": "integer"
          },
          "createdBy": {
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "summary": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "startAt": {
            "type": "string",
            "format": "date-time"
          },
          "endAt": {
            "type": "string",
            "format": "date-time"
          },
          "timezone": {
            "type": "string"
          },
          "visibility": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "attendanceLimit": {
            "type": "integer",
            "nullable": true
          },
          "attendanceCount": {
            "type": "integer"
          },
          "waitlistCount": {
            "type": "integer"
          },
          "requiresRsvp": {
            "type": "boolean"
          },
          "isOnline": {
            "type": "boolean"
          },
          "meetingUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "locationName": {
            "type": "string",
            "nullable": true
          },
          "locationAddress": {
            "type": "string",
            "nullable": true
          },
          "locationLatitude": {
            "type": "number",
            "nullable": true
          },
          "locationLongitude": {
            "type": "number",
            "nullable": true
          },
          "coverImageUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "recurrenceRule": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "communityId",
          "createdBy",
          "title",
          "slug",
          "startAt",
          "endAt",
          "timezone",
          "visibility",
          "status",
          "attendanceCount",
          "waitlistCount",
          "requiresRsvp",
          "isOnline",
          "metadata",
          "createdAt",
          "updatedAt"
        ]
      },
      "CommunityEventMap": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "provider": {
            "type": "string",
            "nullable": true
          },
          "coordinates": {
            "type": "object",
            "nullable": true,
            "properties": {
              "latitude": {
                "type": "number"
              },
              "longitude": {
                "type": "number"
              }
            }
          },
          "locationName": {
            "type": "string",
            "nullable": true
          },
          "locationAddress": {
            "type": "string",
            "nullable": true
          },
          "meetingUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "shareUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        },
        "required": [
          "type"
        ]
      },
      "CommunityEventParticipant": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "eventId": {
            "type": "integer"
          },
          "userId": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "rsvpAt": {
            "type": "string",
            "format": "date-time"
          },
          "checkInAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "reminderScheduledAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          }
        },
        "required": [
          "id",
          "eventId",
          "userId",
          "status",
          "rsvpAt",
          "metadata"
        ]
      },
      "CommunityEventReminder": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "eventId": {
            "type": "integer"
          },
          "userId": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "channel": {
            "type": "string"
          },
          "remindAt": {
            "type": "string",
            "format": "date-time"
          },
          "sentAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastAttemptAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "attemptCount": {
            "type": "integer"
          },
          "failureReason": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          }
        },
        "required": [
          "id",
          "eventId",
          "userId",
          "status",
          "channel",
          "remindAt",
          "attemptCount",
          "metadata"
        ]
      },
      "CommunityEventDetail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommunityEvent"
          },
          {
            "type": "object",
            "properties": {
              "map": {
                "$ref": "#/components/schemas/CommunityEventMap"
              },
              "participants": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CommunityEventParticipant"
                }
              },
              "attendance": {
                "type": "object",
                "properties": {
                  "confirmed": {
                    "type": "integer"
                  },
                  "waitlisted": {
                    "type": "integer"
                  }
                },
                "required": [
                  "confirmed",
                  "waitlisted"
                ]
              }
            }
          }
        ]
      },
      "CommunityCalendarEvent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "startAt": {
            "type": "string",
            "format": "date-time"
          },
          "endAt": {
            "type": "string",
            "format": "date-time"
          },
          "timezone": {
            "type": "string"
          },
          "visibility": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "map": {
            "$ref": "#/components/schemas/CommunityEventMap"
          }
        },
        "required": [
          "id",
          "title",
          "startAt",
          "endAt",
          "timezone",
          "visibility",
          "status"
        ]
      },
      "CommunityCalendar": {
        "type": "object",
        "properties": {
          "month": {
            "type": "integer"
          },
          "year": {
            "type": "integer"
          },
          "eventsByDate": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CommunityCalendarEvent"
              }
            }
          }
        },
        "required": [
          "month",
          "year",
          "eventsByDate"
        ]
      },
      "ContentAsset": {
        "type": "object",
        "properties": {
          "publicId": {
            "type": "string"
          },
          "originalFilename": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "powerpoint",
              "ebook",
              "pdf",
              "document",
              "video"
            ]
          },
          "status": {
            "type": "string"
          },
          "visibility": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "nullable": true
          }
        },
        "required": [
          "publicId",
          "originalFilename",
          "type",
          "status",
          "visibility"
        ]
      },
      "UploadSessionResponse": {
        "type": "object",
        "properties": {
          "asset": {
            "$ref": "#/components/schemas/ContentAsset"
          },
          "upload": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri"
              },
              "bucket": {
                "type": "string"
              },
              "key": {
                "type": "string"
              },
              "expiresAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "url",
              "bucket",
              "key",
              "expiresAt"
            ]
          }
        },
        "required": [
          "asset",
          "upload"
        ]
      },
      "ViewerToken": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time"
          },
          "watermark": {
            "type": "string"
          },
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "asset": {
            "$ref": "#/components/schemas/ContentAsset"
          }
        },
        "required": [
          "url",
          "expiresAt",
          "watermark",
          "asset"
        ]
      },
      "ContentAnalytics": {
        "type": "object",
        "properties": {
          "asset": {
            "$ref": "#/components/schemas/ContentAsset"
          },
          "events": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "eventType": {
                  "type": "string"
                },
                "total": {
                  "type": "integer"
                }
              }
            }
          },
          "outputs": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "format": {
                  "type": "string"
                },
                "storageKey": {
                  "type": "string"
                },
                "storageBucket": {
                  "type": "string"
                }
              }
            }
          },
          "recentActivity": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "eventType": {
                  "type": "string"
                },
                "occurredAt": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          "progressSummary": {
            "type": "object",
            "nullable": true,
            "properties": {
              "readers": {
                "type": "integer"
              },
              "averageProgress": {
                "type": "number"
              }
            }
          }
        },
        "required": [
          "asset",
          "events"
        ]
      },
      "VerificationStatus": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "verified"
            ]
          },
          "emailVerifiedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "required": [
          "status",
          "emailVerifiedAt"
        ]
      },
      "PaymentTotals": {
        "type": "object",
        "properties": {
          "subtotal": {
            "type": "integer",
            "description": "Subtotal before discounts and taxes, expressed in cents."
          },
          "discount": {
            "type": "integer",
            "description": "Discount amount applied in cents."
          },
          "tax": {
            "type": "integer",
            "description": "Tax amount applied in cents."
          },
          "total": {
            "type": "integer",
            "description": "Total payable amount in cents."
          }
        },
        "required": [
          "subtotal",
          "discount",
          "tax",
          "total"
        ]
      },
      "PaymentLineItemInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "unitAmount": {
            "type": "integer",
            "minimum": 50,
            "description": "Unit price in cents."
          },
          "quantity": {
            "type": "integer",
            "minimum": 1,
            "default": 1
          },
          "taxExempt": {
            "type": "boolean",
            "default": false
          },
          "metadata": {
            "type": "object",
            "nullable": true
          }
        },
        "required": [
          "unitAmount"
        ]
      },
      "PaymentIntentCreateRequest": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "stripe",
              "paypal"
            ]
          },
          "currency": {
            "type": "string",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentLineItemInput"
            }
          },
          "couponCode": {
            "type": "string",
            "nullable": true
          },
          "tax": {
            "type": "object",
            "nullable": true,
            "properties": {
              "country": {
                "type": "string",
                "description": "Two-letter country code."
              },
              "region": {
                "type": "string",
                "nullable": true
              },
              "postalCode": {
                "type": "string",
                "nullable": true
              }
            },
            "required": [
              "country"
            ]
          },
          "entity": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "name": {
                "type": "string",
                "nullable": true
              },
              "description": {
                "type": "string",
                "nullable": true
              }
            },
            "required": [
              "id",
              "type"
            ]
          },
          "metadata": {
            "type": "object",
            "nullable": true
          },
          "receiptEmail": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "paypal": {
            "type": "object",
            "nullable": true,
            "properties": {
              "returnUrl": {
                "type": "string",
                "format": "uri"
              },
              "cancelUrl": {
                "type": "string",
                "format": "uri"
              },
              "brandName": {
                "type": "string",
                "nullable": true
              }
            },
            "required": [
              "returnUrl",
              "cancelUrl"
            ]
          }
        },
        "required": [
          "provider",
          "items"
        ]
      },
      "PaymentIntentCreateResponse": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "stripe",
              "paypal"
            ]
          },
          "paymentId": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "clientSecret": {
            "type": "string",
            "nullable": true
          },
          "approvalUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "totals": {
            "$ref": "#/components/schemas/PaymentTotals"
          }
        },
        "required": [
          "provider",
          "paymentId",
          "status",
          "totals"
        ]
      },
      "PaymentIntentRecord": {
        "type": "object",
        "properties": {
          "paymentId": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "amountSubtotal": {
            "type": "integer"
          },
          "amountDiscount": {
            "type": "integer"
          },
          "amountTax": {
            "type": "integer"
          },
          "amountTotal": {
            "type": "integer"
          },
          "amountRefunded": {
            "type": "integer"
          },
          "taxBreakdown": {
            "type": "object"
          },
          "metadata": {
            "type": "object"
          },
          "couponId": {
            "type": "integer",
            "nullable": true
          },
          "entityType": {
            "type": "string"
          },
          "entityId": {
            "type": "string"
          },
          "receiptEmail": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "capturedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "canceledAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "failureCode": {
            "type": "string",
            "nullable": true
          },
          "failureMessage": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "paymentId",
          "provider",
          "status",
          "currency",
          "amountSubtotal",
          "amountDiscount",
          "amountTax",
          "amountTotal",
          "amountRefunded",
          "metadata",
          "entityType",
          "entityId",
          "createdAt",
          "updatedAt"
        ]
      },
      "PaymentSummaryEntry": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string"
          },
          "gross": {
            "type": "integer"
          },
          "discount": {
            "type": "integer"
          },
          "net": {
            "type": "integer"
          },
          "tax": {
            "type": "integer"
          },
          "refunded": {
            "type": "integer"
          },
          "captured": {
            "type": "integer"
          }
        },
        "required": [
          "currency",
          "gross",
          "discount",
          "net",
          "tax",
          "refunded",
          "captured"
        ]
      },
      "CouponPublic": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "discountType": {
            "type": "string",
            "enum": [
              "percentage",
              "fixed_amount"
            ]
          },
          "discountValue": {
            "type": "integer"
          },
          "currency": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string"
          },
          "validFrom": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "validUntil": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "maxRedemptions": {
            "type": "integer",
            "nullable": true
          },
          "perUserLimit": {
            "type": "integer",
            "nullable": true
          },
          "timesRedeemed": {
            "type": "integer"
          }
        },
        "required": [
          "code",
          "name",
          "discountType",
          "discountValue",
          "status",
          "timesRedeemed"
        ]
      },
      "PaymentRefundRequest": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "minimum": 1,
            "description": "Optional refund amount expressed in cents."
          },
          "reason": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CommunityRoleDefinition": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "communityId": {
            "type": "integer"
          },
          "roleKey": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "permissions": {
            "type": "object"
          },
          "isDefaultAssignable": {
            "type": "boolean"
          },
          "createdBy": {
            "type": "integer",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "communityId",
          "roleKey",
          "name",
          "permissions",
          "isDefaultAssignable",
          "createdAt",
          "updatedAt"
        ]
      },
      "CommunityRoleAssignment": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer"
          },
          "role": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "metadata": {
            "type": "object"
          }
        },
        "required": [
          "userId",
          "role",
          "status",
          "metadata"
        ]
      },
      "CommunityPaywallTier": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "communityId": {
            "type": "integer"
          },
          "slug": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "priceCents": {
            "type": "integer"
          },
          "currency": {
            "type": "string"
          },
          "billingInterval": {
            "type": "string"
          },
          "trialPeriodDays": {
            "type": "integer"
          },
          "isActive": {
            "type": "boolean"
          },
          "benefits": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object"
          },
          "stripePriceId": {
            "type": "string",
            "nullable": true
          },
          "paypalPlanId": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "communityId",
          "slug",
          "name",
          "priceCents",
          "currency",
          "billingInterval",
          "trialPeriodDays",
          "isActive",
          "benefits",
          "metadata",
          "createdAt",
          "updatedAt"
        ]
      },
      "CommunitySubscription": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "publicId": {
            "type": "string"
          },
          "communityId": {
            "type": "integer"
          },
          "userId": {
            "type": "integer"
          },
          "tierId": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "currentPeriodStart": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "currentPeriodEnd": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "cancelAtPeriodEnd": {
            "type": "boolean"
          },
          "canceledAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "provider": {
            "type": "string"
          },
          "providerCustomerId": {
            "type": "string",
            "nullable": true
          },
          "providerSubscriptionId": {
            "type": "string",
            "nullable": true
          },
          "providerStatus": {
            "type": "string",
            "nullable": true
          },
          "latestPaymentIntentId": {
            "type": "integer",
            "nullable": true
          },
          "affiliateId": {
            "type": "integer",
            "nullable": true
          },
          "metadata": {
            "type": "object"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "publicId",
          "communityId",
          "userId",
          "tierId",
          "status",
          "cancelAtPeriodEnd",
          "provider",
          "metadata",
          "createdAt",
          "updatedAt"
        ]
      },
      "CommunityAffiliate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "communityId": {
            "type": "integer"
          },
          "userId": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "referralCode": {
            "type": "string"
          },
          "commissionRateBasisPoints": {
            "type": "integer"
          },
          "totalEarnedCents": {
            "type": "integer"
          },
          "totalPaidCents": {
            "type": "integer"
          },
          "metadata": {
            "type": "object"
          },
          "approvedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "suspendedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "revokedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "communityId",
          "userId",
          "status",
          "referralCode",
          "commissionRateBasisPoints",
          "totalEarnedCents",
          "totalPaidCents",
          "metadata",
          "createdAt",
          "updatedAt"
        ]
      },
      "CommunityAffiliatePayout": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "affiliateId": {
            "type": "integer"
          },
          "amountCents": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "payoutReference": {
            "type": "string",
            "nullable": true
          },
          "scheduledAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "processedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "failureReason": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "type": "object"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "affiliateId",
          "amountCents",
          "status",
          "metadata",
          "createdAt",
          "updatedAt"
        ]
      },
      "CommunitySubscriptionCheckoutResponse": {
        "type": "object",
        "properties": {
          "payment": {
            "$ref": "#/components/schemas/PaymentIntentCreateResponse"
          },
          "subscription": {
            "$ref": "#/components/schemas/CommunitySubscription"
          }
        },
        "required": [
          "payment",
          "subscription"
        ]
      },
      "CommunityRoleCollection": {
        "type": "object",
        "properties": {
          "definitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommunityRoleDefinition"
            }
          },
          "assignments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommunityRoleAssignment"
            }
          }
        },
        "required": [
          "definitions",
          "assignments"
        ]
      },
      "CommunityPaywallTierInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "priceCents": {
            "type": "integer"
          },
          "currency": {
            "type": "string"
          },
          "billingInterval": {
            "type": "string"
          },
          "trialPeriodDays": {
            "type": "integer"
          },
          "isActive": {
            "type": "boolean"
          },
          "benefits": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object"
          },
          "stripePriceId": {
            "type": "string"
          },
          "paypalPlanId": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "priceCents",
          "currency",
          "billingInterval"
        ]
      },
      "CommunityPaywallTierUpdateInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "priceCents": {
            "type": "integer"
          },
          "currency": {
            "type": "string"
          },
          "billingInterval": {
            "type": "string"
          },
          "trialPeriodDays": {
            "type": "integer"
          },
          "isActive": {
            "type": "boolean"
          },
          "benefits": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object"
          },
          "stripePriceId": {
            "type": "string"
          },
          "paypalPlanId": {
            "type": "string"
          }
        }
      },
      "SocialUserSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 91
          },
          "firstName": {
            "type": "string",
            "example": "Nova"
          },
          "lastName": {
            "type": "string",
            "example": "Rahman"
          },
          "role": {
            "type": "string",
            "example": "user"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "nova.rahman@example.com"
          },
          "mutualFollowers": {
            "type": "integer",
            "example": 3
          }
        },
        "required": [
          "id",
          "firstName",
          "lastName",
          "role",
          "email"
        ]
      },
      "FollowRelationship": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1501
          },
          "followerId": {
            "type": "integer",
            "example": 42
          },
          "followingId": {
            "type": "integer",
            "example": 91
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "accepted",
              "declined"
            ],
            "example": "accepted"
          },
          "source": {
            "type": "string",
            "example": "profile-card",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "example": "Requested mentorship",
            "nullable": true
          },
          "acceptedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "followerId",
          "followingId",
          "status"
        ]
      },
      "FollowListItem": {
        "type": "object",
        "properties": {
          "relationship": {
            "$ref": "#/components/schemas/FollowRelationship"
          },
          "user": {
            "$ref": "#/components/schemas/SocialUserSummary"
          }
        }
      },
      "FollowViewerContext": {
        "type": "object",
        "properties": {
          "viewerFollowsSubject": {
            "type": "boolean",
            "example": true
          },
          "subjectFollowsViewer": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "FollowRecommendationItem": {
        "type": "object",
        "properties": {
          "recommendation": {
            "type": "object",
            "properties": {
              "score": {
                "type": "number",
                "format": "float",
                "example": 87.5
              },
              "mutualFollowersCount": {
                "type": "integer",
                "example": 2
              },
              "reasonCode": {
                "type": "string",
                "example": "mutual_followers"
              },
              "generatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "score",
              "mutualFollowersCount",
              "reasonCode"
            ]
          },
          "user": {
            "$ref": "#/components/schemas/SocialUserSummary"
          }
        }
      },
      "FollowRequest": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "maxLength": 80,
            "example": "profile-card"
          },
          "reason": {
            "type": "string",
            "maxLength": 240,
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "MuteRequest": {
        "type": "object",
        "properties": {
          "durationMinutes": {
            "type": "integer",
            "minimum": 5,
            "example": 120
          },
          "reason": {
            "type": "string",
            "maxLength": 240,
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "BlockRequest": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "maxLength": 240,
            "nullable": true
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "SocialPrivacySettings": {
        "type": "object",
        "properties": {
          "profileVisibility": {
            "type": "string",
            "enum": [
              "public",
              "followers",
              "private"
            ],
            "example": "followers"
          },
          "followApprovalRequired": {
            "type": "boolean",
            "example": true
          },
          "messagePermission": {
            "type": "string",
            "enum": [
              "anyone",
              "followers",
              "none"
            ],
            "example": "followers"
          },
          "shareActivity": {
            "type": "boolean",
            "example": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          }
        },
        "required": [
          "profileVisibility",
          "followApprovalRequired",
          "messagePermission",
          "shareActivity"
        ]
      },
      "SocialPrivacyUpdateRequest": {
        "$ref": "#/components/schemas/SocialPrivacySettings"
      },
      "ExplorerMapMarker": {
        "type": "object",
        "properties": {
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "label": {
            "type": "string"
          },
          "country": {
            "type": "string",
            "description": "ISO 3166-1 alpha-2 country code",
            "nullable": true
          },
          "context": {
            "type": "string",
            "description": "Entity context for the marker"
          }
        },
        "required": [
          "latitude",
          "longitude",
          "label",
          "context"
        ]
      },
      "ExplorerHit": {
        "type": "object",
        "properties": {
          "id": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              }
            ]
          },
          "entityType": {
            "type": "string",
            "enum": [
              "communities",
              "courses",
              "ebooks",
              "tutors",
              "profiles",
              "ads",
              "events"
            ]
          },
          "title": {
            "type": "string"
          },
          "subtitle": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "metrics": {
            "type": "object",
            "additionalProperties": true
          },
          "actions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "label": {
                  "type": "string"
                },
                "href": {
                  "type": "string"
                }
              },
              "required": [
                "label"
              ],
              "additionalProperties": false
            }
          },
          "geo": {
            "$ref": "#/components/schemas/ExplorerMapMarker",
            "nullable": true
          },
          "raw": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "entityType",
          "title",
          "raw"
        ]
      },
      "ExplorerEntityResult": {
        "type": "object",
        "properties": {
          "entity": {
            "type": "string",
            "enum": [
              "communities",
              "courses",
              "ebooks",
              "tutors",
              "profiles",
              "ads",
              "events"
            ]
          },
          "totalHits": {
            "type": "integer"
          },
          "page": {
            "type": "integer"
          },
          "perPage": {
            "type": "integer"
          },
          "sort": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "filter": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "facets": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "integer"
              }
            }
          },
          "hits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExplorerHit"
            }
          },
          "processingTimeMs": {
            "type": "integer"
          },
          "query": {
            "type": "string"
          },
          "markers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExplorerMapMarker"
            }
          }
        },
        "required": [
          "entity",
          "totalHits",
          "page",
          "perPage",
          "hits"
        ]
      },
      "ExplorerSearchResponse": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string"
          },
          "page": {
            "type": "integer"
          },
          "perPage": {
            "type": "integer"
          },
          "entities": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "communities",
                "courses",
                "ebooks",
                "tutors",
                "profiles",
                "ads",
                "events"
              ]
            }
          },
          "results": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ExplorerEntityResult"
            }
          },
          "totals": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          },
          "markers": {
            "type": "object",
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExplorerMapMarker"
                }
              },
              "bounds": {
                "type": "object",
                "nullable": true,
                "properties": {
                  "minLat": {
                    "type": "number",
                    "format": "double"
                  },
                  "maxLat": {
                    "type": "number",
                    "format": "double"
                  },
                  "minLng": {
                    "type": "number",
                    "format": "double"
                  },
                  "maxLng": {
                    "type": "number",
                    "format": "double"
                  }
                }
              }
            },
            "required": [
              "items"
            ]
          },
          "analytics": {
            "type": "object",
            "nullable": true,
            "properties": {
              "searchEventId": {
                "type": "string",
                "format": "uuid"
              },
              "totalResults": {
                "type": "integer"
              },
              "totalDisplayed": {
                "type": "integer"
              },
              "zeroResult": {
                "type": "boolean"
              }
            }
          }
        },
        "required": [
          "page",
          "perPage",
          "entities",
          "results",
          "totals",
          "markers"
        ]
      },
      "ExplorerAnalyticsRange": {
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "days": {
            "type": "integer",
            "minimum": 1
          }
        },
        "required": [
          "start",
          "end",
          "days"
        ]
      },
      "ExplorerAnalyticsTotals": {
        "type": "object",
        "properties": {
          "searches": {
            "type": "integer"
          },
          "zeroResultRate": {
            "type": "number",
            "format": "double"
          },
          "clickThroughRate": {
            "type": "number",
            "format": "double"
          },
          "averageLatencyMs": {
            "type": "integer"
          },
          "uniqueUsers": {
            "type": "integer",
            "nullable": true
          }
        },
        "required": [
          "searches",
          "zeroResultRate",
          "clickThroughRate",
          "averageLatencyMs"
        ]
      },
      "ExplorerAnalyticsEntityBreakdown": {
        "type": "object",
        "properties": {
          "entityType": {
            "type": "string"
          },
          "searches": {
            "type": "integer"
          },
          "zeroResultRate": {
            "type": "number",
            "format": "double"
          },
          "clickThroughRate": {
            "type": "number",
            "format": "double"
          },
          "displayedResults": {
            "type": "integer"
          },
          "clicks": {
            "type": "integer"
          },
          "averageLatencyMs": {
            "type": "integer"
          }
        },
        "required": [
          "entityType",
          "searches",
          "zeroResultRate",
          "clickThroughRate",
          "displayedResults",
          "clicks"
        ]
      },
      "ExplorerAnalyticsTimeseriesPoint": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date"
          },
          "searches": {
            "type": "integer"
          },
          "zeroResultRate": {
            "type": "number",
            "format": "double"
          },
          "clickThroughRate": {
            "type": "number",
            "format": "double"
          },
          "averageLatencyMs": {
            "type": "integer"
          }
        },
        "required": [
          "date",
          "searches",
          "zeroResultRate",
          "clickThroughRate"
        ]
      },
      "ExplorerAnalyticsQueryMetric": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string"
          },
          "searches": {
            "type": "integer"
          }
        },
        "required": [
          "query",
          "searches"
        ]
      },
      "ExplorerAnalyticsAdsSummary": {
        "type": "object",
        "properties": {
          "impressions": {
            "type": "integer"
          },
          "clicks": {
            "type": "integer"
          },
          "conversions": {
            "type": "integer"
          },
          "spendCents": {
            "type": "integer"
          },
          "revenueCents": {
            "type": "integer"
          },
          "clickThroughRate": {
            "type": "number",
            "format": "double"
          },
          "conversionRate": {
            "type": "number",
            "format": "double"
          },
          "roas": {
            "type": "number",
            "format": "double"
          }
        },
        "required": [
          "impressions",
          "clicks",
          "conversions",
          "spendCents",
          "revenueCents"
        ]
      },
      "ExplorerAnalyticsExperiment": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "enabled": {
            "type": "boolean"
          },
          "rolloutPercentage": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          }
        },
        "required": [
          "key",
          "name",
          "enabled"
        ]
      },
      "ExplorerAnalyticsForecastEntry": {
        "type": "object",
        "properties": {
          "targetDate": {
            "type": "string",
            "format": "date"
          },
          "metricValue": {
            "type": "number",
            "format": "double"
          },
          "lowerBound": {
            "type": "number",
            "format": "double"
          },
          "upperBound": {
            "type": "number",
            "format": "double"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          }
        },
        "required": [
          "targetDate",
          "metricValue",
          "lowerBound",
          "upperBound"
        ]
      },
      "ExplorerAnalyticsAlert": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "alertCode": {
            "type": "string"
          },
          "severity": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          },
          "detectedAt": {
            "type": "string",
            "format": "date-time"
          },
          "resolvedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "required": [
          "alertCode",
          "severity",
          "message",
          "detectedAt"
        ]
      },
      "ExplorerAnalyticsSummary": {
        "type": "object",
        "properties": {
          "range": {
            "$ref": "#/components/schemas/ExplorerAnalyticsRange"
          },
          "totals": {
            "$ref": "#/components/schemas/ExplorerAnalyticsTotals"
          },
          "entityBreakdown": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExplorerAnalyticsEntityBreakdown"
            }
          },
          "timeseries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExplorerAnalyticsTimeseriesPoint"
            }
          },
          "topQueries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExplorerAnalyticsQueryMetric"
            }
          },
          "zeroResultQueries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExplorerAnalyticsQueryMetric"
            }
          },
          "ads": {
            "$ref": "#/components/schemas/ExplorerAnalyticsAdsSummary"
          },
          "experiments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExplorerAnalyticsExperiment"
            }
          },
          "forecasts": {
            "type": "object",
            "properties": {
              "searchVolume": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExplorerAnalyticsForecastEntry"
                }
              },
              "clickThroughRate": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExplorerAnalyticsForecastEntry"
                }
              }
            }
          },
          "alerts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExplorerAnalyticsAlert"
            }
          }
        },
        "required": [
          "range",
          "totals",
          "entityBreakdown",
          "timeseries",
          "topQueries",
          "ads",
          "forecasts",
          "alerts"
        ]
      },
      "ExplorerInteractionRequest": {
        "type": "object",
        "properties": {
          "searchEventId": {
            "type": "string",
            "format": "uuid"
          },
          "entityType": {
            "type": "string",
            "example": "courses"
          },
          "resultId": {
            "type": "string",
            "example": "automation-masterclass"
          },
          "interactionType": {
            "type": "string",
            "enum": [
              "click",
              "detail_view",
              "bookmark"
            ],
            "default": "click"
          },
          "position": {
            "type": "integer",
            "minimum": 0,
            "nullable": true
          }
        },
        "required": [
          "searchEventId",
          "entityType",
          "resultId"
        ]
      },
      "ExplorerInteractionRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "eventId": {
            "type": "integer"
          },
          "entityType": {
            "type": "string"
          },
          "resultId": {
            "type": "string"
          },
          "interactionType": {
            "type": "string"
          },
          "position": {
            "type": "integer",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "eventId",
          "entityType",
          "resultId",
          "interactionType",
          "createdAt"
        ]
      },
      "ExplorerSearchRequest": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "example": "automation playbook"
          },
          "entityTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "communities",
                "courses",
                "ebooks",
                "tutors",
                "profiles",
                "ads",
                "events"
              ]
            }
          },
          "page": {
            "type": "integer",
            "minimum": 1,
            "default": 1
          },
          "perPage": {
            "type": "integer",
            "minimum": 1,
            "maximum": 50,
            "default": 12
          },
          "filters": {
            "type": "object",
            "additionalProperties": true
          },
          "globalFilters": {
            "type": "object",
            "additionalProperties": true
          },
          "sort": {
            "type": "object",
            "additionalProperties": true
          },
          "includeFacets": {
            "type": "boolean",
            "default": true
          },
          "savedSearchId": {
            "type": "integer"
          }
        }
      },
      "SavedExplorerSearch": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "query": {
            "type": "string"
          },
          "entityTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "communities",
                "courses",
                "ebooks",
                "tutors",
                "profiles",
                "ads",
                "events"
              ]
            }
          },
          "filters": {
            "type": "object",
            "additionalProperties": true
          },
          "globalFilters": {
            "type": "object",
            "additionalProperties": true
          },
          "sortPreferences": {
            "type": "object",
            "additionalProperties": true
          },
          "isPinned": {
            "type": "boolean"
          },
          "lastUsedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "entityTypes",
          "filters",
          "globalFilters",
          "sortPreferences",
          "isPinned",
          "createdAt",
          "updatedAt"
        ]
      },
      "SavedExplorerSearchRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "query": {
            "type": "string"
          },
          "entityTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "communities",
                "courses",
                "ebooks",
                "tutors",
                "profiles",
                "ads",
                "events"
              ]
            }
          },
          "filters": {
            "type": "object",
            "additionalProperties": true
          },
          "globalFilters": {
            "type": "object",
            "additionalProperties": true
          },
          "sort": {
            "type": "object",
            "additionalProperties": true
          },
          "isPinned": {
            "type": "boolean"
          }
        },
        "required": [
          "name"
        ]
      },
      "AdsBudget": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "example": "USD"
          },
          "dailyCents": {
            "type": "integer",
            "example": 500000
          }
        },
        "required": [
          "currency",
          "dailyCents"
        ]
      },
      "AdsSpend": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "example": "USD"
          },
          "totalCents": {
            "type": "integer",
            "example": 182500
          }
        },
        "required": [
          "currency",
          "totalCents"
        ]
      },
      "AdsMetricLifetime": {
        "type": "object",
        "properties": {
          "impressions": {
            "type": "integer",
            "example": 90750
          },
          "clicks": {
            "type": "integer",
            "example": 3828
          },
          "conversions": {
            "type": "integer",
            "example": 452
          },
          "spendCents": {
            "type": "integer",
            "example": 77700
          },
          "revenueCents": {
            "type": "integer",
            "example": 207700
          },
          "lastRecordedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ctr": {
            "type": "number",
            "format": "float",
            "example": 0.0421
          },
          "conversionRate": {
            "type": "number",
            "format": "float",
            "example": 0.1181
          },
          "cpcCents": {
            "type": "integer",
            "example": 203
          },
          "cpaCents": {
            "type": "integer",
            "example": 901
          },
          "roas": {
            "type": "number",
            "format": "float",
            "nullable": true,
            "example": 2.67
          }
        }
      },
      "AdsMetricTrailing": {
        "type": "object",
        "properties": {
          "impressions": {
            "type": "integer",
            "example": 48750
          },
          "clicks": {
            "type": "integer",
            "example": 2043
          },
          "conversions": {
            "type": "integer",
            "example": 238
          },
          "spendCents": {
            "type": "integer",
            "example": 41200
          },
          "revenueCents": {
            "type": "integer",
            "example": 109500
          },
          "ctr": {
            "type": "number",
            "format": "float",
            "example": 0.0419
          },
          "conversionRate": {
            "type": "number",
            "format": "float",
            "example": 0.1165
          },
          "cpcCents": {
            "type": "integer",
            "example": 202
          },
          "cpaCents": {
            "type": "integer",
            "example": 867
          }
        }
      },
      "AdsMetricForecast": {
        "type": "object",
        "properties": {
          "expectedDailySpendCents": {
            "type": "integer",
            "example": 52000
          },
          "expectedDailyConversions": {
            "type": "number",
            "format": "float",
            "example": 18.4
          },
          "projectedRoas": {
            "type": "number",
            "format": "float",
            "nullable": true,
            "example": 2.54
          }
        }
      },
      "AdsMetrics": {
        "type": "object",
        "properties": {
          "lifetime": {
            "$ref": "#/components/schemas/AdsMetricLifetime"
          },
          "trailing7Days": {
            "$ref": "#/components/schemas/AdsMetricTrailing"
          },
          "forecast": {
            "$ref": "#/components/schemas/AdsMetricForecast"
          }
        }
      },
      "AdsTargeting": {
        "type": "object",
        "properties": {
          "keywords": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "audiences": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "locations": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "languages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AdsCreative": {
        "type": "object",
        "properties": {
          "headline": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        }
      },
      "AdsSchedule": {
        "type": "object",
        "properties": {
          "startAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "AdsComplianceViolation": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "severity": {
            "type": "string",
            "enum": [
              "critical",
              "warning"
            ]
          },
          "message": {
            "type": "string"
          }
        }
      },
      "AdsCompliance": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "pass",
              "needs_review",
              "halted"
            ]
          },
          "riskScore": {
            "type": "number",
            "format": "float",
            "example": 72.5
          },
          "violations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdsComplianceViolation"
            }
          }
        }
      },
      "AdsCampaign": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "internalId": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "objective": {
            "type": "string",
            "enum": [
              "awareness",
              "traffic",
              "leads",
              "conversions"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "draft",
              "scheduled",
              "active",
              "paused",
              "completed",
              "archived"
            ]
          },
          "performanceScore": {
            "type": "number",
            "format": "float"
          },
          "budget": {
            "$ref": "#/components/schemas/AdsBudget"
          },
          "spend": {
            "$ref": "#/components/schemas/AdsSpend"
          },
          "metrics": {
            "$ref": "#/components/schemas/AdsMetrics"
          },
          "targeting": {
            "$ref": "#/components/schemas/AdsTargeting"
          },
          "creative": {
            "$ref": "#/components/schemas/AdsCreative"
          },
          "schedule": {
            "$ref": "#/components/schemas/AdsSchedule"
          },
          "compliance": {
            "$ref": "#/components/schemas/AdsCompliance"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          },
          "createdBy": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "CreateAdsCampaignRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "objective": {
            "type": "string",
            "enum": [
              "awareness",
              "traffic",
              "leads",
              "conversions"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "draft",
              "scheduled",
              "active",
              "paused"
            ]
          },
          "budget": {
            "$ref": "#/components/schemas/AdsBudget"
          },
          "targeting": {
            "$ref": "#/components/schemas/AdsTargeting"
          },
          "creative": {
            "$ref": "#/components/schemas/AdsCreative"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          },
          "startAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "required": [
          "name",
          "objective",
          "budget",
          "creative"
        ]
      },
      "UpdateAdsCampaignRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "objective": {
            "type": "string",
            "enum": [
              "awareness",
              "traffic",
              "leads",
              "conversions"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "draft",
              "scheduled",
              "active",
              "paused",
              "completed",
              "archived"
            ]
          },
          "budget": {
            "$ref": "#/components/schemas/AdsBudget"
          },
          "targeting": {
            "$ref": "#/components/schemas/AdsTargeting"
          },
          "creative": {
            "$ref": "#/components/schemas/AdsCreative"
          },
          "schedule": {
            "$ref": "#/components/schemas/AdsSchedule"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "RecordAdsMetricsRequest": {
        "type": "object",
        "properties": {
          "metricDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "impressions": {
            "type": "integer"
          },
          "clicks": {
            "type": "integer"
          },
          "conversions": {
            "type": "integer"
          },
          "spendCents": {
            "type": "integer"
          },
          "revenueCents": {
            "type": "integer",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          }
        },
        "required": [
          "impressions",
          "clicks",
          "conversions",
          "spendCents"
        ]
      },
      "AdsInsightSummary": {
        "type": "object",
        "properties": {
          "impressions": {
            "type": "integer"
          },
          "clicks": {
            "type": "integer"
          },
          "conversions": {
            "type": "integer"
          },
          "spendCents": {
            "type": "integer"
          },
          "revenueCents": {
            "type": "integer"
          },
          "ctr": {
            "type": "number",
            "format": "float"
          },
          "conversionRate": {
            "type": "number",
            "format": "float"
          },
          "cpcCents": {
            "type": "integer"
          },
          "cpaCents": {
            "type": "integer"
          }
        }
      },
      "AdsInsightDaily": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "impressions": {
            "type": "integer"
          },
          "clicks": {
            "type": "integer"
          },
          "conversions": {
            "type": "integer"
          },
          "spendCents": {
            "type": "integer"
          },
          "revenueCents": {
            "type": "integer"
          },
          "ctr": {
            "type": "number",
            "format": "float"
          },
          "conversionRate": {
            "type": "number",
            "format": "float"
          },
          "cpcCents": {
            "type": "integer"
          },
          "cpaCents": {
            "type": "integer"
          }
        }
      },
      "AdsInsightsResponse": {
        "type": "object",
        "properties": {
          "summary": {
            "$ref": "#/components/schemas/AdsInsightSummary"
          },
          "daily": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdsInsightDaily"
            }
          }
        }
      },
      "VerificationRequirement": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Verification document type identifier"
          },
          "label": {
            "type": "string",
            "description": "Human readable label presented to users"
          },
          "description": {
            "type": "string",
            "description": "Guidance for preparing the document"
          }
        },
        "required": [
          "type",
          "label"
        ]
      },
      "VerificationDocument": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "type": {
            "type": "string",
            "description": "Document type uploaded by the user"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "accepted",
              "rejected"
            ]
          },
          "fileName": {
            "type": "string"
          },
          "mimeType": {
            "type": "string"
          },
          "sizeBytes": {
            "type": "integer"
          },
          "submittedAt": {
            "type": "string",
            "format": "date-time"
          },
          "reviewedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "VerificationSummary": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Current verification status for the user"
          },
          "reference": {
            "type": "string",
            "description": "Unique verification reference"
          },
          "documentsRequired": {
            "type": "integer"
          },
          "documentsSubmitted": {
            "type": "integer"
          },
          "requiredDocuments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VerificationRequirement"
            }
          },
          "outstandingDocuments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VerificationRequirement"
            }
          },
          "riskScore": {
            "type": "number"
          },
          "needsManualReview": {
            "type": "boolean"
          },
          "escalationLevel": {
            "type": "string"
          },
          "lastSubmittedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastReviewedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "rejectionReason": {
            "type": "string",
            "nullable": true
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VerificationDocument"
            }
          }
        }
      },
      "VerificationUploadResponse": {
        "type": "object",
        "properties": {
          "verificationReference": {
            "type": "string"
          },
          "documentType": {
            "type": "string"
          },
          "upload": {
            "type": "object",
            "properties": {
              "bucket": {
                "type": "string"
              },
              "key": {
                "type": "string"
              },
              "url": {
                "type": "string",
                "format": "uri"
              },
              "expiresAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "bucket",
              "key",
              "url",
              "expiresAt"
            ]
          }
        },
        "required": [
          "verificationReference",
          "documentType",
          "upload"
        ]
      },
      "VerificationMetric": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "change": {
            "type": "string",
            "nullable": true
          },
          "trend": {
            "type": "string",
            "enum": [
              "up",
              "down"
            ],
            "nullable": true
          }
        }
      },
      "VerificationQueueItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "reference": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "user": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "email": {
                "type": "string",
                "format": "email"
              }
            },
            "required": [
              "id",
              "name",
              "email"
            ]
          },
          "riskScore": {
            "type": "number"
          },
          "escalationLevel": {
            "type": "string"
          },
          "documentsSubmitted": {
            "type": "integer"
          },
          "documentsRequired": {
            "type": "integer"
          },
          "lastSubmittedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "waitingHours": {
            "type": "number"
          },
          "hasBreachedSla": {
            "type": "boolean"
          },
          "verification": {
            "$ref": "#/components/schemas/VerificationSummary"
          }
        }
      },
      "VerificationAdminOverview": {
        "type": "object",
        "properties": {
          "metrics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VerificationMetric"
            }
          },
          "queue": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VerificationQueueItem"
            }
          },
          "slaBreaches": {
            "type": "integer"
          },
          "manualReviewQueue": {
            "type": "integer"
          },
          "lastGeneratedAt": {
            "type": "string",
            "format": "date-time"
          },
          "gdpr": {
            "$ref": "#/components/schemas/GdprComplianceProfile"
          }
        }
      },
      "GdprComplianceProfile": {
        "type": "object",
        "properties": {
          "dsar": {
            "type": "object",
            "properties": {
              "open": {
                "type": "integer"
              },
              "dueSoon": {
                "type": "integer"
              },
              "overdue": {
                "type": "integer"
              },
              "completed30d": {
                "type": "integer"
              },
              "averageCompletionHours": {
                "type": "integer"
              },
              "slaHours": {
                "type": "integer"
              },
              "owner": {
                "type": "string"
              },
              "nextIcoSubmission": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "registers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "owner": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                },
                "lastReviewed": {
                  "type": "string",
                  "format": "date-time"
                },
                "nextReviewDue": {
                  "type": "string",
                  "format": "date-time"
                },
                "coverage": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "retentionPolicy": {
                  "type": "string"
                }
              }
            }
          },
          "controls": {
            "type": "object",
            "additionalProperties": true
          },
          "ico": {
            "type": "object",
            "properties": {
              "registrationNumber": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "feeTier": {
                "type": "string"
              },
              "renewalDue": {
                "type": "string",
                "format": "date-time"
              },
              "lastSubmitted": {
                "type": "string",
                "format": "date-time"
              },
              "publicRegisterUrl": {
                "type": "string",
                "format": "uri"
              },
              "reportingOwner": {
                "type": "string"
              }
            }
          }
        }
      },
      "VerificationAuditEntry": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "action": {
            "type": "string"
          },
          "notes": {
            "type": "string",
            "nullable": true
          },
          "actor": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "email": {
                "type": "string",
                "format": "email"
              }
            }
          },
          "metadata": {
            "type": "object"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "VerificationReviewRequest": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "approved",
              "rejected",
              "resubmission_required"
            ]
          },
          "riskScore": {
            "type": "number",
            "minimum": 0,
            "maximum": 100
          },
          "rejectionReason": {
            "type": "string",
            "nullable": true
          },
          "escalationLevel": {
            "type": "string",
            "enum": [
              "none",
              "t1",
              "t2",
              "t3"
            ]
          },
          "policyReferences": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "status"
        ]
      },
      "EbookPrice": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string"
          },
          "amountCents": {
            "type": "integer"
          },
          "formatted": {
            "type": "string"
          }
        },
        "required": [
          "currency",
          "amountCents"
        ]
      },
      "EbookAnalytics": {
        "type": "object",
        "properties": {
          "downloads": {
            "type": "integer"
          },
          "readers": {
            "type": "integer"
          },
          "purchases": {
            "type": "integer"
          },
          "revenueCents": {
            "type": "integer"
          },
          "revenueFormatted": {
            "type": "string"
          }
        },
        "required": [
          "downloads",
          "readers",
          "purchases",
          "revenueCents"
        ]
      },
      "EbookRating": {
        "type": "object",
        "properties": {
          "average": {
            "type": "number"
          },
          "count": {
            "type": "integer"
          }
        },
        "required": [
          "average",
          "count"
        ]
      },
      "EbookListing": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "assetId": {
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "subtitle": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "$ref": "#/components/schemas/EbookPrice"
          },
          "readingTimeMinutes": {
            "type": "integer",
            "nullable": true
          },
          "authors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "languages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isbn": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string"
          },
          "isPublic": {
            "type": "boolean"
          },
          "releaseAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "metadata": {
            "type": "object"
          },
          "analytics": {
            "$ref": "#/components/schemas/EbookAnalytics"
          },
          "rating": {
            "$ref": "#/components/schemas/EbookRating"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "required": [
          "id",
          "assetId",
          "title",
          "slug",
          "price",
          "status",
          "isPublic",
          "metadata",
          "analytics",
          "rating"
        ]
      },
      "EbookRevenueSummary": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string"
          },
          "amountCents": {
            "type": "integer"
          },
          "formatted": {
            "type": "string"
          }
        },
        "required": [
          "currency",
          "amountCents"
        ]
      },
      "EbookCatalogueMetrics": {
        "type": "object",
        "properties": {
          "totalTitles": {
            "type": "integer"
          },
          "publishedTitles": {
            "type": "integer"
          },
          "draftTitles": {
            "type": "integer"
          },
          "totalDownloads": {
            "type": "integer"
          },
          "totalReaders": {
            "type": "integer"
          },
          "revenueByCurrency": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EbookRevenueSummary"
            }
          }
        },
        "required": [
          "totalTitles",
          "publishedTitles",
          "draftTitles",
          "totalDownloads",
          "totalReaders",
          "revenueByCurrency"
        ]
      },
      "EbookRecentPurchase": {
        "type": "object",
        "properties": {
          "ebookPublicId": {
            "type": "string"
          },
          "amountCents": {
            "type": "integer"
          },
          "currency": {
            "type": "string"
          },
          "capturedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "formatted": {
            "type": "string"
          }
        },
        "required": [
          "ebookPublicId",
          "amountCents",
          "currency"
        ]
      },
      "EbookCatalogueResponse": {
        "type": "object",
        "properties": {
          "catalogue": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EbookListing"
            }
          },
          "metrics": {
            "$ref": "#/components/schemas/EbookCatalogueMetrics"
          },
          "recentPurchases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EbookRecentPurchase"
            }
          }
        },
        "required": [
          "catalogue",
          "metrics",
          "recentPurchases"
        ]
      },
      "EbookCreateRequest": {
        "type": "object",
        "required": [
          "assetId",
          "title",
          "price"
        ],
        "properties": {
          "assetId": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string"
          },
          "subtitle": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "authors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "languages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isbn": {
            "type": "string"
          },
          "readingTimeMinutes": {
            "type": "integer"
          },
          "price": {
            "type": "object",
            "required": [
              "currency",
              "amount"
            ],
            "properties": {
              "currency": {
                "type": "string"
              },
              "amount": {
                "type": "number",
                "format": "float"
              }
            }
          },
          "metadata": {
            "type": "object"
          },
          "status": {
            "type": "string"
          },
          "isPublic": {
            "type": "boolean"
          },
          "releaseAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "EbookUpdateRequest": {
        "type": "object",
        "required": [],
        "properties": {
          "assetId": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string"
          },
          "subtitle": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "authors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "languages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isbn": {
            "type": "string"
          },
          "readingTimeMinutes": {
            "type": "integer"
          },
          "price": {
            "type": "object",
            "required": [
              "currency",
              "amount"
            ],
            "properties": {
              "currency": {
                "type": "string"
              },
              "amount": {
                "type": "number",
                "format": "float"
              }
            }
          },
          "metadata": {
            "type": "object"
          },
          "status": {
            "type": "string"
          },
          "isPublic": {
            "type": "boolean"
          },
          "releaseAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "EbookStateRequest": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "isPublic": {
            "type": "boolean"
          },
          "releaseAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "EbookPurchaseIntentRequest": {
        "type": "object",
        "required": [
          "provider"
        ],
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "stripe",
              "paypal"
            ]
          },
          "couponCode": {
            "type": "string"
          },
          "returnUrl": {
            "type": "string",
            "format": "uri"
          },
          "cancelUrl": {
            "type": "string",
            "format": "uri"
          },
          "brandName": {
            "type": "string"
          },
          "receiptEmail": {
            "type": "string",
            "format": "email"
          }
        }
      },
      "EbookPurchaseIntentResponse": {
        "type": "object",
        "properties": {
          "payment": {
            "$ref": "#/components/schemas/PaymentIntentCreateResponse"
          },
          "intent": {
            "$ref": "#/components/schemas/PaymentIntentRecord"
          }
        },
        "required": [
          "payment"
        ]
      },
      "FeatureFlagVariant": {
        "type": "object",
        "description": "Weighted variant definition used when rolling out feature flags.",
        "properties": {
          "key": {
            "type": "string",
            "description": "Variant key returned to clients when selected."
          },
          "weight": {
            "type": "number",
            "nullable": true,
            "description": "Distribution weight applied during percentage or schedule rollouts."
          },
          "payload": {
            "type": "object",
            "nullable": true,
            "additionalProperties": true,
            "description": "Optional JSON payload returned with the variant selection."
          }
        },
        "required": [
          "key"
        ]
      },
      "FeatureFlagDefinition": {
        "type": "object",
        "description": "Full feature flag definition used to evaluate capability access.",
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "environments": {
            "type": "array",
            "nullable": true,
            "description": "Environments where the flag is allowed to run.",
            "items": {
              "type": "string"
            }
          },
          "rolloutStrategy": {
            "type": "string",
            "nullable": true,
            "description": "Strategy controlling exposure such as percentage or schedule."
          },
          "rolloutPercentage": {
            "type": "number",
            "nullable": true,
            "description": "Percentage of traffic eligible when using percentage-based rollouts."
          },
          "killSwitch": {
            "type": "boolean",
            "nullable": true,
            "description": "Indicates whether the kill switch is forcing the flag off."
          },
          "variants": {
            "type": "array",
            "nullable": true,
            "description": "Set of variants available for multivariate rollouts.",
            "items": {
              "$ref": "#/components/schemas/FeatureFlagVariant"
            }
          },
          "segmentRules": {
            "type": "object",
            "nullable": true,
            "additionalProperties": true,
            "description": "Segment targeting rules evaluated during rollout."
          }
        },
        "required": [
          "key"
        ]
      },
      "FeatureFlagEvaluation": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "reason": {
            "type": "string"
          },
          "variant": {
            "type": [
              "string",
              "null"
            ]
          },
          "bucket": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "strategy": {
            "type": [
              "string",
              "null"
            ]
          },
          "evaluatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "key",
          "enabled",
          "evaluatedAt"
        ]
      },
      "CapabilityManifestComponentStatus": {
        "type": "object",
        "description": "Individual component readiness reported by a service probe.",
        "properties": {
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "description": "Component level availability state such as ready or degraded."
          },
          "ready": {
            "type": "boolean"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "required": [
          "name",
          "status",
          "ready"
        ]
      },
      "CapabilityManifestServiceStatus": {
        "type": "object",
        "description": "Availability state for a core platform service.",
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "ready": {
            "type": "boolean"
          },
          "status": {
            "type": "string",
            "enum": [
              "operational",
              "degraded",
              "outage",
              "unknown"
            ],
            "description": "Overall service status derived from readiness checks."
          },
          "summary": {
            "type": "string"
          },
          "checkedAt": {
            "type": "string",
            "format": "date-time"
          },
          "components": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CapabilityManifestComponentStatus"
            }
          },
          "raw": {
            "type": "object",
            "nullable": true,
            "additionalProperties": true,
            "description": "Raw readiness payload returned by the probed service."
          }
        },
        "required": [
          "key",
          "name",
          "category",
          "type",
          "ready",
          "status",
          "summary",
          "checkedAt",
          "components"
        ]
      },
      "CapabilityManifestCapability": {
        "type": "object",
        "description": "Capability exposure information derived from feature flags and service dependencies.",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "capability": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "basePath": {
            "type": "string"
          },
          "flagKey": {
            "type": "string"
          },
          "defaultState": {
            "type": "string",
            "enum": [
              "enabled",
              "disabled"
            ],
            "description": "Default rollout state applied when the flag definition is missing."
          },
          "audience": {
            "type": "string",
            "nullable": true,
            "description": "Audience tier allowed to consume the capability."
          },
          "enabled": {
            "type": "boolean"
          },
          "status": {
            "type": "string",
            "enum": [
              "operational",
              "degraded",
              "outage",
              "disabled"
            ],
            "description": "Availability derived from dependencies and flag evaluation."
          },
          "summary": {
            "type": "string"
          },
          "dependencies": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "dependencyStatuses": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "accessible": {
            "type": "boolean"
          },
          "severityRank": {
            "type": "integer",
            "format": "int32",
            "description": "Numeric severity ranking to help clients order incidents."
          },
          "evaluation": {
            "$ref": "#/components/schemas/FeatureFlagEvaluation"
          },
          "generatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "capability",
          "flagKey",
          "defaultState",
          "enabled",
          "status",
          "summary",
          "dependencies",
          "dependencyStatuses",
          "accessible",
          "severityRank",
          "evaluation",
          "generatedAt"
        ]
      },
      "CapabilityManifestSummaryBreakdown": {
        "type": "object",
        "description": "Counts of services or capabilities by availability status.",
        "properties": {
          "operational": {
            "type": "integer",
            "format": "int32"
          },
          "degraded": {
            "type": "integer",
            "format": "int32"
          },
          "outage": {
            "type": "integer",
            "format": "int32"
          },
          "unknown": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "disabled": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "required": [
          "operational",
          "degraded",
          "outage"
        ]
      },
      "CapabilityManifestSummary": {
        "type": "object",
        "description": "Summary counters representing capability and service health.",
        "properties": {
          "services": {
            "$ref": "#/components/schemas/CapabilityManifestSummaryBreakdown"
          },
          "capabilities": {
            "$ref": "#/components/schemas/CapabilityManifestSummaryBreakdown"
          }
        },
        "required": [
          "services",
          "capabilities"
        ]
      },
      "CapabilityManifest": {
        "type": "object",
        "description": "Aggregated readiness report combining service health, capability exposure, and summary counts.",
        "properties": {
          "environment": {
            "type": "string"
          },
          "generatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "audience": {
            "type": "string"
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CapabilityManifestServiceStatus"
            }
          },
          "capabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CapabilityManifestCapability"
            }
          },
          "summary": {
            "$ref": "#/components/schemas/CapabilityManifestSummary"
          }
        },
        "required": [
          "environment",
          "generatedAt",
          "audience",
          "services",
          "capabilities",
          "summary"
        ]
      },
      "FeedRange": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "key",
          "start",
          "end"
        ]
      },
      "FeedPagination": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "perPage": {
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "page",
          "perPage",
          "total",
          "pageCount"
        ]
      },
      "FeedTrendingTag": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "tag",
          "count"
        ]
      },
      "FeedEngagement": {
        "type": "object",
        "properties": {
          "postsSampled": {
            "type": "integer",
            "format": "int32"
          },
          "postsTotal": {
            "type": "integer",
            "format": "int32"
          },
          "comments": {
            "type": "integer",
            "format": "int32"
          },
          "reactions": {
            "type": "integer",
            "format": "int32"
          },
          "uniqueCommunities": {
            "type": "integer",
            "format": "int32"
          },
          "trendingTags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeedTrendingTag"
            }
          },
          "latestActivityAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "required": [
          "postsSampled",
          "postsTotal",
          "comments",
          "reactions",
          "uniqueCommunities",
          "trendingTags"
        ]
      },
      "FeedAdsTotals": {
        "type": "object",
        "properties": {
          "impressions": {
            "type": "integer",
            "format": "int64"
          },
          "clicks": {
            "type": "integer",
            "format": "int64"
          },
          "conversions": {
            "type": "integer",
            "format": "int64"
          },
          "spendCents": {
            "type": "integer",
            "format": "int64"
          },
          "revenueCents": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "impressions",
          "clicks",
          "conversions",
          "spendCents",
          "revenueCents"
        ]
      },
      "FeedAdsSummary": {
        "type": "object",
        "properties": {
          "placementsServed": {
            "type": "integer",
            "format": "int32"
          },
          "campaignsServed": {
            "type": "integer",
            "format": "int32"
          },
          "activeCampaigns": {
            "type": "integer",
            "format": "int32"
          },
          "scheduledCampaigns": {
            "type": "integer",
            "format": "int32"
          },
          "totals": {
            "$ref": "#/components/schemas/FeedAdsTotals"
          }
        },
        "required": [
          "placementsServed",
          "campaignsServed",
          "activeCampaigns",
          "scheduledCampaigns",
          "totals"
        ]
      },
      "FeedAnalytics": {
        "type": "object",
        "properties": {
          "generatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "range": {
            "$ref": "#/components/schemas/FeedRange"
          },
          "engagement": {
            "$ref": "#/components/schemas/FeedEngagement"
          },
          "ads": {
            "$ref": "#/components/schemas/FeedAdsSummary"
          }
        },
        "required": [
          "generatedAt",
          "range",
          "engagement",
          "ads"
        ]
      },
      "FeedAdMetrics": {
        "type": "object",
        "properties": {
          "ctr": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "cpcCents": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "cpaCents": {
            "type": "number",
            "format": "float",
            "nullable": true
          }
        }
      },
      "FeedAdTracking": {
        "type": "object",
        "properties": {
          "impressionKey": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          }
        },
        "required": [
          "impressionKey",
          "requestId"
        ]
      },
      "FeedAuthor": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "nullable": true
          },
          "avatarUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "name"
        ]
      },
      "FeedCommunityRef": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "slug": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "FeedPostStats": {
        "type": "object",
        "properties": {
          "comments": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "reactions": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "reactionBreakdown": {
            "type": "object",
            "additionalProperties": true,
            "nullable": true
          }
        }
      },
      "FeedPost": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "body": {
            "type": "string",
            "nullable": true
          },
          "publishedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "scheduledAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "visibility": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "channel": {
            "type": "object",
            "additionalProperties": true,
            "nullable": true
          },
          "community": {
            "$ref": "#/components/schemas/FeedCommunityRef",
            "nullable": true
          },
          "author": {
            "$ref": "#/components/schemas/FeedAuthor",
            "nullable": true
          },
          "stats": {
            "$ref": "#/components/schemas/FeedPostStats",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true,
            "nullable": true
          }
        }
      },
      "FeedAd": {
        "type": "object",
        "properties": {
          "placementId": {
            "type": "string"
          },
          "campaignId": {
            "type": "string"
          },
          "context": {
            "type": "string"
          },
          "slot": {
            "type": "string"
          },
          "position": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "headline": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "ctaUrl": {
            "type": "string",
            "nullable": true
          },
          "advertiser": {
            "type": "string",
            "nullable": true
          },
          "objective": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "disclosure": {
            "type": "string",
            "nullable": true
          },
          "metrics": {
            "$ref": "#/components/schemas/FeedAdMetrics",
            "nullable": true
          },
          "tracking": {
            "$ref": "#/components/schemas/FeedAdTracking",
            "nullable": true
          },
          "targeting": {
            "type": "object",
            "additionalProperties": true,
            "nullable": true
          }
        },
        "required": [
          "placementId",
          "campaignId",
          "context",
          "slot"
        ]
      },
      "FeedItem": {
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "enum": [
              "post",
              "ad"
            ]
          },
          "context": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "post": {
            "$ref": "#/components/schemas/FeedPost",
            "nullable": true
          },
          "ad": {
            "$ref": "#/components/schemas/FeedAd",
            "nullable": true
          }
        },
        "required": [
          "kind",
          "context",
          "timestamp"
        ]
      },
      "FeedHighlight": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "summary": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "projectType": {
            "type": "string",
            "nullable": true
          },
          "objective": {
            "type": "string",
            "nullable": true
          },
          "ownerId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "metrics": {
            "$ref": "#/components/schemas/FeedAdMetrics",
            "nullable": true
          },
          "targeting": {
            "type": "object",
            "additionalProperties": true,
            "nullable": true
          },
          "schedule": {
            "type": "object",
            "additionalProperties": true,
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true,
            "nullable": true
          },
          "analyticsTargets": {
            "type": "object",
            "additionalProperties": true,
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "position": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "context": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "type",
          "id",
          "timestamp"
        ]
      },
      "FeedSnapshot": {
        "type": "object",
        "properties": {
          "context": {
            "type": "string"
          },
          "community": {
            "type": "string",
            "nullable": true
          },
          "range": {
            "$ref": "#/components/schemas/FeedRange"
          },
          "generatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "pagination": {
            "$ref": "#/components/schemas/FeedPagination"
          },
          "ads": {
            "$ref": "#/components/schemas/FeedAdsSummary"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeedItem"
            }
          },
          "highlights": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeedHighlight"
            }
          },
          "analytics": {
            "$ref": "#/components/schemas/FeedAnalytics",
            "nullable": true
          }
        },
        "required": [
          "context",
          "range",
          "generatedAt",
          "pagination",
          "ads",
          "items",
          "highlights"
        ]
      },
      "FeedSnapshotResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StandardResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/FeedSnapshot"
              }
            }
          }
        ]
      },
      "FeedAnalyticsResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StandardResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/FeedAnalytics"
              }
            }
          }
        ]
      },
      "FeedPlacementsResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StandardResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FeedAd"
                }
              }
            }
          }
        ]
      },
      "CreationRecommendationSignal": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Signal identifier describing the heuristic that contributed to the score."
          },
          "weight": {
            "type": "number",
            "format": "double",
            "description": "Positive or negative weighting applied to the overall score."
          },
          "detail": {
            "type": "object",
            "additionalProperties": true,
            "description": "Raw evidence captured for the signal."
          }
        },
        "required": [
          "code",
          "weight"
        ]
      },
      "CreationRecommendationAction": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "instructions": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "label",
          "instructions"
        ]
      },
      "CreationRecommendation": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "integer",
            "format": "int32"
          },
          "projectPublicId": {
            "type": "string",
            "description": "Stable identifier used across clients."
          },
          "projectTitle": {
            "type": "string"
          },
          "projectType": {
            "type": "string",
            "enum": [
              "course",
              "ebook",
              "community",
              "ads_asset"
            ]
          },
          "collaboratorCount": {
            "type": "integer",
            "format": "int32"
          },
          "priority": {
            "type": "string",
            "enum": [
              "high",
              "medium",
              "low"
            ]
          },
          "action": {
            "$ref": "#/components/schemas/CreationRecommendationAction"
          },
          "score": {
            "type": "number",
            "format": "double"
          },
          "recommendedAt": {
            "type": "string",
            "format": "date-time"
          },
          "signals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreationRecommendationSignal"
            }
          }
        },
        "required": [
          "projectPublicId",
          "projectTitle",
          "projectType",
          "priority",
          "action",
          "score",
          "recommendedAt",
          "signals"
        ]
      },
      "CreationRecommendationHistoryItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "generatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "algorithmVersion": {
            "type": "string"
          },
          "tenantId": {
            "type": "string"
          },
          "featureFlagState": {
            "type": "string"
          },
          "featureFlagVariant": {
            "type": [
              "string",
              "null"
            ]
          },
          "recommendationCount": {
            "type": "integer",
            "format": "int32"
          },
          "context": {
            "type": "object",
            "additionalProperties": true
          }
        },
        "required": [
          "id",
          "generatedAt",
          "algorithmVersion",
          "tenantId",
          "featureFlagState",
          "recommendationCount"
        ]
      },
      "CreationRecommendationMeta": {
        "type": "object",
        "properties": {
          "algorithmVersion": {
            "type": "string"
          },
          "generatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "tenantId": {
            "type": "string"
          },
          "totalProjectsEvaluated": {
            "type": "integer",
            "format": "int32"
          },
          "history": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreationRecommendationHistoryItem"
            }
          }
        },
        "required": [
          "algorithmVersion",
          "generatedAt",
          "tenantId",
          "totalProjectsEvaluated"
        ]
      },
      "CreationRecommendationsPayload": {
        "type": "object",
        "properties": {
          "recommendations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreationRecommendation"
            }
          },
          "evaluation": {
            "$ref": "#/components/schemas/FeatureFlagEvaluation"
          },
          "meta": {
            "$ref": "#/components/schemas/CreationRecommendationMeta"
          }
        },
        "required": [
          "recommendations",
          "evaluation",
          "meta"
        ]
      },
      "CreationRecommendationResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StandardResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/CreationRecommendationsPayload"
              }
            },
            "required": [
              "data"
            ]
          }
        ]
      },
      "ObservabilitySloIndicator": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "http"
            ]
          },
          "routePattern": {
            "type": "string"
          },
          "routePatternFlags": {
            "type": "string"
          },
          "methodWhitelist": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "excludeRoutePatterns": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "treat4xxAsFailures": {
            "type": "boolean"
          },
          "failureStatusCodes": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "default": []
          },
          "successStatusCodes": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "default": []
          }
        },
        "required": [
          "type",
          "routePattern"
        ]
      },
      "ObservabilitySloAlerting": {
        "type": "object",
        "properties": {
          "burnRateWarning": {
            "type": "number"
          },
          "burnRateCritical": {
            "type": "number"
          },
          "minRequests": {
            "type": "integer"
          }
        },
        "required": [
          "burnRateWarning",
          "burnRateCritical",
          "minRequests"
        ]
      },
      "ObservabilitySloLatencySummary": {
        "type": "object",
        "properties": {
          "p50Ms": {
            "type": "number"
          },
          "p95Ms": {
            "type": "number"
          },
          "p99Ms": {
            "type": "number"
          },
          "averageMs": {
            "type": "number"
          },
          "maxMs": {
            "type": "number"
          },
          "minMs": {
            "type": "number"
          },
          "sampleSize": {
            "type": "integer"
          }
        },
        "required": [
          "p50Ms",
          "p95Ms",
          "p99Ms",
          "averageMs",
          "maxMs",
          "minMs",
          "sampleSize"
        ]
      },
      "ObservabilitySloAnnotation": {
        "type": "object",
        "properties": {
          "severity": {
            "type": "string",
            "enum": [
              "info",
              "warning",
              "critical"
            ]
          },
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "severity",
          "code",
          "message"
        ]
      },
      "ObservabilitySloDefinition": {
        "type": "object",
        "properties": {
          "indicator": {
            "$ref": "#/components/schemas/ObservabilitySloIndicator"
          },
          "alerting": {
            "$ref": "#/components/schemas/ObservabilitySloAlerting"
          },
          "metadata": {
            "type": "object",
            "nullable": true,
            "additionalProperties": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          }
        },
        "required": [
          "indicator",
          "alerting",
          "tags"
        ]
      },
      "ObservabilitySloSnapshot": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "targetAvailability": {
            "type": "number"
          },
          "windowMinutes": {
            "type": "integer"
          },
          "status": {
            "type": "string",
            "enum": [
              "healthy",
              "warning",
              "critical",
              "breaching",
              "insufficient_data",
              "no_data"
            ]
          },
          "measuredAvailability": {
            "type": "number",
            "nullable": true
          },
          "successCount": {
            "type": "integer"
          },
          "errorCount": {
            "type": "integer"
          },
          "totalRequests": {
            "type": "integer"
          },
          "errorBudget": {
            "type": "number",
            "nullable": true
          },
          "errorBudgetRemaining": {
            "type": "number",
            "nullable": true
          },
          "burnRate": {
            "type": "number"
          },
          "latency": {
            "$ref": "#/components/schemas/ObservabilitySloLatencySummary",
            "nullable": true
          },
          "windowStart": {
            "type": "string",
            "format": "date-time"
          },
          "windowEnd": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "observedMinutes": {
            "type": "integer"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "annotations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObservabilitySloAnnotation"
            },
            "default": []
          },
          "definition": {
            "$ref": "#/components/schemas/ObservabilitySloDefinition",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "targetAvailability",
          "windowMinutes",
          "status",
          "successCount",
          "errorCount",
          "totalRequests",
          "burnRate",
          "windowStart",
          "windowEnd",
          "observedMinutes",
          "tags",
          "annotations"
        ]
      },
      "ObservabilitySloCollection": {
        "type": "object",
        "properties": {
          "generatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "slo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObservabilitySloSnapshot"
            }
          }
        },
        "required": [
          "generatedAt",
          "slo"
        ]
      },
      "ObservabilitySloListResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StandardResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ObservabilitySloCollection"
              }
            }
          }
        ]
      },
      "ObservabilitySloDetailResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StandardResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/ObservabilitySloSnapshot"
              }
            }
          }
        ]
      },
      "EnvironmentDependencyCheck": {
        "type": "object",
        "properties": {
          "component": {
            "type": "string",
            "description": "Name of the dependency that was evaluated."
          },
          "status": {
            "type": "string",
            "enum": [
              "healthy",
              "failed",
              "skipped"
            ]
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "component",
          "status"
        ]
      },
      "EnvironmentParityManifestEntry": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Relative path to the artefact that was hashed."
          },
          "hash": {
            "type": "string",
            "description": "SHA-256 fingerprint of the artefact.",
            "pattern": "^[a-f0-9]{64}$"
          }
        },
        "required": [
          "path",
          "hash"
        ]
      },
      "EnvironmentParityManifest": {
        "type": "object",
        "properties": {
          "modules": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EnvironmentParityManifestEntry"
            }
          },
          "environments": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EnvironmentParityManifestEntry"
            }
          },
          "docker": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EnvironmentParityManifestEntry"
            }
          },
          "scripts": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EnvironmentParityManifestEntry"
            }
          },
          "root": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EnvironmentParityManifestEntry"
            }
          }
        },
        "required": [
          "modules",
          "environments",
          "docker",
          "scripts",
          "root"
        ]
      },
      "EnvironmentParityMismatch": {
        "type": "object",
        "properties": {
          "component": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "missing",
              "drifted",
              "relocated",
              "unexpected"
            ]
          },
          "expected": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EnvironmentParityManifestEntry"
              }
            ],
            "nullable": true
          },
          "observed": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EnvironmentParityManifestEntry"
              }
            ],
            "nullable": true
          }
        },
        "required": [
          "component",
          "status"
        ]
      },
      "EnvironmentParityReport": {
        "type": "object",
        "properties": {
          "environment": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "provider": {
                "type": "string"
              },
              "region": {
                "type": "string"
              },
              "tier": {
                "type": "string"
              },
              "deploymentStrategy": {
                "type": "string"
              },
              "parityBudgetMinutes": {
                "type": "integer"
              },
              "infrastructureOwner": {
                "type": "string"
              },
              "gitSha": {
                "type": "string",
                "nullable": true
              },
              "releaseChannel": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "manifestVersion": {
                "type": "integer"
              }
            },
            "required": [
              "name",
              "provider",
              "region",
              "tier",
              "deploymentStrategy",
              "parityBudgetMinutes",
              "infrastructureOwner",
              "releaseChannel",
              "host",
              "manifestVersion"
            ]
          },
          "dependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnvironmentDependencyCheck"
            }
          },
          "manifest": {
            "type": "object",
            "properties": {
              "expected": {
                "$ref": "#/components/schemas/EnvironmentParityManifest"
              },
              "observed": {
                "$ref": "#/components/schemas/EnvironmentParityManifest"
              }
            },
            "required": [
              "expected",
              "observed"
            ]
          },
          "mismatches": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnvironmentParityMismatch"
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "healthy",
              "drifted",
              "degraded"
            ]
          },
          "generatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "environment",
          "dependencies",
          "manifest",
          "mismatches",
          "status",
          "generatedAt"
        ]
      },
      "EnvironmentParityResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StandardResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/EnvironmentParityReport"
              }
            }
          }
        ]
      },
      "SecurityRiskOwner": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          }
        }
      },
      "SecurityRiskSummary": {
        "type": "object",
        "properties": {
          "statusTotals": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          },
          "totals": {
            "type": "object",
            "properties": {
              "risks": {
                "type": "integer"
              },
              "dueForReview": {
                "type": "integer"
              },
              "openFollowUps": {
                "type": "integer"
              }
            }
          },
          "averages": {
            "type": "object",
            "properties": {
              "inherent": {
                "type": "number"
              },
              "residual": {
                "type": "number"
              }
            }
          },
          "nextReviewAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastUpdatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "topOwners": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "owner": {
                  "type": "string",
                  "nullable": true
                },
                "total": {
                  "type": "integer"
                }
              }
            }
          },
          "topTags": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "tag": {
                  "type": "string"
                },
                "count": {
                  "type": "integer"
                }
              }
            }
          }
        }
      },
      "SecurityRiskRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "riskUuid": {
            "type": "string"
          },
          "tenantId": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "severity": {
            "type": "string"
          },
          "likelihood": {
            "type": "string"
          },
          "residualSeverity": {
            "type": "string"
          },
          "residualLikelihood": {
            "type": "string"
          },
          "inherentRiskScore": {
            "type": "number"
          },
          "residualRiskScore": {
            "type": "number"
          },
          "mitigationPlan": {
            "type": "string",
            "nullable": true
          },
          "residualNotes": {
            "type": "string",
            "nullable": true
          },
          "regulatoryDriver": {
            "type": "string",
            "nullable": true
          },
          "reviewCadenceDays": {
            "type": "integer"
          },
          "identifiedAt": {
            "type": "string",
            "format": "date-time"
          },
          "acceptedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "remediatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "closedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastReviewedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "nextReviewAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "owner": {
            "$ref": "#/components/schemas/SecurityRiskOwner"
          },
          "riskOwnerUserId": {
            "type": "integer",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "detectionControls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "mitigationControls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "riskUuid",
          "tenantId",
          "title",
          "description",
          "status",
          "severity",
          "likelihood",
          "residualRiskScore"
        ]
      },
      "SecurityRiskListResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecurityRiskRecord"
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer"
              },
              "limit": {
                "type": "integer"
              },
              "offset": {
                "type": "integer"
              }
            }
          },
          "summary": {
            "$ref": "#/components/schemas/SecurityRiskSummary"
          }
        },
        "required": [
          "items",
          "pagination",
          "summary"
        ]
      },
      "SecurityRiskReviewRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "reviewUuid": {
            "type": "string"
          },
          "riskId": {
            "type": "integer"
          },
          "reviewerId": {
            "type": "integer",
            "nullable": true
          },
          "reviewerName": {
            "type": "string",
            "nullable": true
          },
          "reviewerEmail": {
            "type": "string",
            "nullable": true,
            "format": "email"
          },
          "status": {
            "type": "string"
          },
          "residualSeverity": {
            "type": "string"
          },
          "residualLikelihood": {
            "type": "string"
          },
          "residualRiskScore": {
            "type": "number"
          },
          "notes": {
            "type": "string",
            "nullable": true
          },
          "evidenceReferences": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "reviewedAt": {
            "type": "string",
            "format": "date-time"
          },
          "nextReviewAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "SecurityAuditEvidence": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "evidenceUuid": {
            "type": "string"
          },
          "tenantId": {
            "type": "string"
          },
          "riskId": {
            "type": "integer",
            "nullable": true
          },
          "framework": {
            "type": "string",
            "nullable": true
          },
          "controlReference": {
            "type": "string",
            "nullable": true
          },
          "evidenceType": {
            "type": "string"
          },
          "storagePath": {
            "type": "string"
          },
          "checksum": {
            "type": "string",
            "nullable": true
          },
          "sources": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "capturedAt": {
            "type": "string",
            "format": "date-time"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "status": {
            "type": "string"
          },
          "submittedBy": {
            "type": "integer",
            "nullable": true
          },
          "submittedByEmail": {
            "type": "string",
            "nullable": true,
            "format": "email"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "type": "object"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "SecurityAuditEvidenceList": {
        "type": "object",
        "properties": {
          "records": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecurityAuditEvidence"
            }
          },
          "total": {
            "type": "integer"
          }
        },
        "required": [
          "records",
          "total"
        ]
      },
      "SecurityContinuityExercise": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "exerciseUuid": {
            "type": "string"
          },
          "tenantId": {
            "type": "string"
          },
          "scenarioKey": {
            "type": "string"
          },
          "scenarioSummary": {
            "type": "string"
          },
          "exerciseType": {
            "type": "string"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time"
          },
          "completedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "rtoTargetMinutes": {
            "type": "integer",
            "nullable": true
          },
          "rpoTargetMinutes": {
            "type": "integer",
            "nullable": true
          },
          "actualRtoMinutes": {
            "type": "integer",
            "nullable": true
          },
          "actualRpoMinutes": {
            "type": "integer",
            "nullable": true
          },
          "outcome": {
            "type": "string"
          },
          "lessonsLearned": {
            "type": "string",
            "nullable": true
          },
          "followUpActions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "owner": {
            "$ref": "#/components/schemas/SecurityRiskOwner"
          },
          "metadata": {
            "type": "object"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "SecurityContinuitySummary": {
        "type": "object",
        "properties": {
          "totals": {
            "type": "object",
            "properties": {
              "completed": {
                "type": "integer"
              },
              "inProgress": {
                "type": "integer"
              },
              "breachedTargets": {
                "type": "integer"
              }
            }
          },
          "latest": {
            "type": "object",
            "nullable": true,
            "$ref": "#/components/schemas/SecurityContinuityExercise"
          }
        }
      },
      "SecurityContinuityResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecurityContinuityExercise"
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer"
              },
              "limit": {
                "type": "integer"
              },
              "offset": {
                "type": "integer"
              }
            }
          },
          "summary": {
            "$ref": "#/components/schemas/SecurityContinuitySummary"
          }
        }
      },
      "SecurityAssessment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "assessmentUuid": {
            "type": "string"
          },
          "tenantId": {
            "type": "string"
          },
          "assessmentType": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "scheduledFor": {
            "type": "string",
            "format": "date-time"
          },
          "completedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "owner": {
            "$ref": "#/components/schemas/SecurityRiskOwner"
          },
          "scope": {
            "type": "string",
            "nullable": true
          },
          "methodology": {
            "type": "string",
            "nullable": true
          },
          "findings": {
            "type": "string",
            "nullable": true
          },
          "nextSteps": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "type": "object"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "SecurityAssessmentList": {
        "type": "object",
        "properties": {
          "records": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecurityAssessment"
            }
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "TelemetryEventIngestRequest": {
        "type": "object",
        "properties": {
          "eventName": { "type": "string" },
          "eventVersion": { "type": "string", "nullable": true },
          "eventSource": { "type": "string" },
          "schemaVersion": { "type": "string" },
          "occurredAt": { "type": "string", "format": "date-time", "nullable": true },
          "receivedAt": { "type": "string", "format": "date-time", "nullable": true },
          "tenantId": { "type": "string", "nullable": true },
          "userId": { "type": "integer", "nullable": true },
          "sessionId": { "type": "string", "nullable": true },
          "deviceId": { "type": "string", "nullable": true },
          "correlationId": { "type": "string", "nullable": true },
          "consentScope": { "type": "string", "nullable": true },
          "payload": { "type": "object" },
          "context": { "type": "object" },
          "metadata": { "type": "object" },
          "tags": {
            "type": "array",
            "items": { "type": "string" }
          }
        },
        "required": ["eventName", "eventSource"]
      },
      "TelemetryEventIngestResponse": {
        "type": "object",
        "properties": {
          "status": { "type": "string" },
          "duplicate": { "type": "boolean" },
          "suppressed": { "type": "boolean" },
          "consentStatus": { "type": "string" },
          "event": {
            "type": "object",
            "properties": {
              "eventUuid": { "type": "string" },
              "eventName": { "type": "string" },
              "eventSource": { "type": "string" },
              "consentScope": { "type": "string" },
              "consentStatus": { "type": "string" },
              "ingestionStatus": { "type": "string" },
              "occurredAt": { "type": "string", "format": "date-time" },
              "receivedAt": { "type": "string", "format": "date-time" }
            }
          }
        },
        "required": ["status", "duplicate", "suppressed", "consentStatus", "event"]
      },
      "TelemetryConsentRequest": {
        "type": "object",
        "properties": {
          "consentScope": { "type": "string" },
          "consentVersion": { "type": "string", "nullable": true },
          "status": { "type": "string", "enum": ["granted", "revoked", "expired"] },
          "tenantId": { "type": "string", "nullable": true },
          "userId": { "type": "integer", "nullable": true },
          "expiresAt": { "type": "string", "format": "date-time", "nullable": true },
          "metadata": { "type": "object", "nullable": true },
          "evidence": { "type": "object", "nullable": true }
        },
        "required": ["consentScope"]
      },
      "TelemetryConsentRecord": {
        "type": "object",
        "properties": {
          "id": { "type": "integer" },
          "userId": { "type": "integer" },
          "tenantId": { "type": "string" },
          "consentScope": { "type": "string" },
          "consentVersion": { "type": "string" },
          "status": { "type": "string" },
          "isActive": { "type": "boolean" },
          "recordedAt": { "type": "string", "format": "date-time" },
          "effectiveAt": { "type": "string", "format": "date-time" },
          "expiresAt": { "type": "string", "format": "date-time", "nullable": true },
          "metadata": { "type": "object" },
          "evidence": { "type": "object" }
        }
      },
      "TelemetryFreshnessMonitor": {
        "type": "object",
        "properties": {
          "pipelineKey": { "type": "string" },
          "status": { "type": "string", "enum": ["healthy", "warning", "critical", "noop"] },
          "lagSeconds": { "type": "integer" },
          "thresholdMinutes": { "type": "integer" },
          "lastEventAt": { "type": "string", "format": "date-time", "nullable": true },
          "metadata": { "type": "object" }
        }
      },
      "TelemetryExportSummary": {
        "type": "object",
        "properties": {
          "status": { "type": "string", "enum": ["exported", "noop", "disabled"] },
          "exported": { "type": "integer" },
          "batchId": { "type": "integer", "nullable": true },
          "fileKey": { "type": "string", "nullable": true }
        }
      },
      "BiExecutiveOverview": {
        "type": "object",
        "properties": {
          "tenantId": { "type": "string" },
          "timeframe": {
            "type": "object",
            "properties": {
              "range": { "type": "string" },
              "days": { "type": "integer" },
              "start": { "type": "string", "format": "date-time" },
              "end": { "type": "string", "format": "date-time" },
              "comparisonStart": { "type": "string", "format": "date-time" },
              "comparisonEnd": { "type": "string", "format": "date-time" }
            }
          },
          "scorecard": {
            "type": "object",
            "properties": {
              "enrollments": { "$ref": "#/components/schemas/ScorecardMetric" },
              "completionRate": { "$ref": "#/components/schemas/ScorecardMetric" },
              "recognisedRevenue": { "$ref": "#/components/schemas/ScorecardMetric" },
              "netRevenue": { "$ref": "#/components/schemas/ScorecardMetric" },
              "averageProgressPercent": { "$ref": "#/components/schemas/ScorecardMetric" },
              "communityEngagement": {
                "type": "object",
                "properties": {
                  "posts": { "$ref": "#/components/schemas/ScorecardMetric" },
                  "comments": { "$ref": "#/components/schemas/ScorecardMetric" },
                  "events": { "type": "integer" }
                }
              }
            }
          },
          "enrollmentTrends": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "date": { "type": "string" },
                "enrollments": { "type": "integer" },
                "completions": { "type": "integer" },
                "recognisedRevenueCents": { "type": "integer" }
              }
            }
          },
          "revenueTrends": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "date": { "type": "string" },
                "currency": { "type": "string" },
                "grossVolumeCents": { "type": "integer" },
                "recognisedVolumeCents": { "type": "integer" }
              }
            }
          },
          "revenueByCurrency": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "currency": { "type": "string" },
                "grossVolumeCents": { "type": "integer" },
                "recognisedVolumeCents": { "type": "integer" },
                "discountCents": { "type": "integer" },
                "taxCents": { "type": "integer" },
                "refundedCents": { "type": "integer" }
              }
            }
          },
          "communityTrends": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "date": { "type": "string" },
                "posts": { "type": "integer" },
                "comments": { "type": "integer" }
              }
            }
          },
          "topCommunities": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "communityId": { "type": "integer" },
                "name": { "type": "string" },
                "posts": { "type": "integer" },
                "comments": { "type": "integer" }
              }
            }
          },
          "categoryBreakdown": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "category": { "type": "string" },
                "deliveryFormat": { "type": "string" },
                "level": { "type": "string" },
                "enrollments": { "type": "integer" },
                "completions": { "type": "integer" },
                "recognisedRevenueCents": { "type": "integer" }
              }
            }
          },
          "experiments": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "key": { "type": "string" },
                "experimentId": { "type": "string", "nullable": true },
                "name": { "type": "string" },
                "status": { "type": "string" },
                "rolloutPercentage": { "type": "number" },
                "owner": { "type": "string", "nullable": true }
              }
            }
          },
          "dataQuality": {
            "type": "object",
            "properties": {
              "status": { "type": "string" },
              "pipelines": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/TelemetryFreshnessMonitor" }
              }
            }
          }
        }
      },
      "ScorecardMetric": {
        "type": "object",
        "properties": {
          "total": { "type": "number" },
          "value": { "type": "number", "nullable": true },
          "cents": { "type": "integer", "nullable": true },
          "change": {
            "type": "object",
            "properties": {
              "absolute": { "type": "number" },
              "percentage": { "type": "number" }
            }
          }
        }
      }
    }
  },
  "paths": {
    "/health": {
      "get": {
        "summary": "Health probe",
        "responses": {
          "200": {
            "description": "API is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardResponse"
                }
              }
            }
          },
          "503": {
            "description": "Downstream dependency failure"
          }
        }
      }
    },
    "/environment/health": {
      "get": {
        "summary": "Environment parity report",
        "description": "Returns the latest infrastructure parity evaluation, including manifest drift and dependency status.",
        "operationId": "getEnvironmentParityReport",
        "tags": [
          "Environment"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Environment parity report generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentParityResponse"
                }
              }
            }
          },
          "503": {
            "description": "Parity drift detected or dependency check failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentParityResponse"
                }
              }
            }
          }
        }
      }
    },
    "/payments": {
      "post": {
        "summary": "Create Stripe or PayPal payment intent",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentIntentCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payment intent created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/PaymentIntentCreateResponse"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "404": {
            "description": "Coupon not found or inactive"
          },
          "409": {
            "description": "Coupon redemption limit reached"
          },
          "422": {
            "description": "Validation error"
          },
          "502": {
            "description": "Payment provider error"
          }
        }
      }
    },
    "/payments/paypal/{paymentId}/capture": {
      "post": {
        "summary": "Capture an approved PayPal order",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PayPal capture completed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/PaymentIntentRecord"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Capture not allowed for current status"
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "404": {
            "description": "Payment intent not found"
          },
          "502": {
            "description": "PayPal returned an error"
          }
        }
      }
    },
    "/payments/{paymentId}/refunds": {
      "post": {
        "summary": "Issue a Stripe or PayPal refund",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentRefundRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Refund accepted",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/PaymentIntentRecord"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Payment intent not found"
          },
          "422": {
            "description": "Invalid refund amount"
          },
          "502": {
            "description": "Payment provider error"
          }
        }
      }
    },
    "/payments/reports/summary": {
      "get": {
        "summary": "Finance summary by currency",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "currency",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Three-letter ISO currency filter"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Finance summary generated",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/PaymentSummaryEntry"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "422": {
            "description": "Invalid filter parameters"
          }
        }
      }
    },
    "/payments/coupons/{code}": {
      "get": {
        "summary": "Retrieve coupon details",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Coupon fetched",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/CouponPublic"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "404": {
            "description": "Coupon not found"
          },
          "422": {
            "description": "Invalid coupon code"
          }
        }
      }
    },
    "/payments/webhooks/stripe": {
      "post": {
        "summary": "Stripe webhook receiver",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Stripe webhook payload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Event processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "received": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Signature validation failed"
          },
          "500": {
            "description": "Webhook processing error"
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "summary": "Register a new user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "firstName",
                  "email",
                  "password"
                ],
                "properties": {
                  "firstName": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 120
                  },
                  "lastName": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "password": {
                    "type": "string",
                    "description": "Minimum 12 characters with upper, lower, number, and symbol"
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "user",
                      "instructor",
                      "admin"
                    ]
                  },
                  "age": {
                    "type": "integer",
                    "minimum": 16,
                    "maximum": 120
                  },
                  "address": {
                    "type": "object",
                    "properties": {
                      "streetAddress": {
                        "type": "string",
                        "description": "Primary street address line"
                      },
                      "addressLine2": {
                        "type": "string",
                        "description": "Additional street or unit information"
                      },
                      "town": {
                        "type": "string",
                        "description": "Town or village"
                      },
                      "city": {
                        "type": "string",
                        "description": "City or municipality"
                      },
                      "country": {
                        "type": "string",
                        "description": "Country or territory"
                      },
                      "postcode": {
                        "type": "string",
                        "description": "Postal or ZIP code"
                      }
                    }
                  },
                  "twoFactor": {
                    "type": "object",
                    "properties": {
                      "enabled": {
                        "type": "boolean",
                        "description": "Enable multi-factor authentication during registration."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Account created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "required": [
                            "user",
                            "verification"
                          ],
                          "properties": {
                            "user": {
                              "$ref": "#/components/schemas/User"
                            },
                            "verification": {
                              "$ref": "#/components/schemas/VerificationStatus"
                            },
                            "twoFactor": {
                              "type": "object",
                              "description": "Multi-factor enrollment details for the new account.",
                              "properties": {
                                "enabled": {
                                  "type": "boolean",
                                  "description": "Indicates whether multi-factor authentication was enabled during registration.",
                                  "readOnly": true
                                },
                                "enforced": {
                                  "type": "boolean",
                                  "description": "True when the selected role requires multi-factor authentication.",
                                  "readOnly": true
                                },
                                "secret": {
                                  "type": "string",
                                  "description": "Base32 secret for configuring an authenticator app. Returned only when MFA is enabled.",
                                  "readOnly": true
                                },
                                "otpauthUrl": {
                                  "type": "string",
                                  "description": "otpauth:// URI used for QR code generation.",
                                  "readOnly": true
                                },
                                "issuer": {
                                  "type": "string",
                                  "description": "Issuer label presented in authenticator applications.",
                                  "readOnly": true
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "409": {
            "description": "Email already exists"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "Authenticate user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "password": {
                    "type": "string"
                  },
                  "twoFactorCode": {
                    "type": "string",
                    "description": "6-10 digit code generated by the user's authenticator application when multi-factor authentication is enabled.",
                    "pattern": "^\\d{6,10}$"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "required": [
                            "user",
                            "verification",
                            "tokens",
                            "session"
                          ],
                          "properties": {
                            "user": {
                              "$ref": "#/components/schemas/User"
                            },
                            "verification": {
                              "$ref": "#/components/schemas/VerificationStatus"
                            },
                            "tokens": {
                              "$ref": "#/components/schemas/AuthTokens"
                            },
                            "session": {
                              "$ref": "#/components/schemas/SessionEnvelope"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials or incorrect two-factor code"
          },
          "403": {
            "description": "Email verification or multi-factor challenge required"
          },
          "409": {
            "description": "Multi-factor configuration required before access"
          },
          "422": {
            "description": "Validation error"
          },
          "423": {
            "description": "Account locked"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "summary": "Refresh session tokens",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "refreshToken"
                ],
                "properties": {
                  "refreshToken": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Session refreshed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "required": [
                            "user",
                            "verification",
                            "tokens",
                            "session"
                          ],
                          "properties": {
                            "user": {
                              "$ref": "#/components/schemas/User"
                            },
                            "verification": {
                              "$ref": "#/components/schemas/VerificationStatus"
                            },
                            "tokens": {
                              "$ref": "#/components/schemas/AuthTokens"
                            },
                            "session": {
                              "$ref": "#/components/schemas/SessionEnvelope"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Refresh token missing"
          },
          "401": {
            "description": "Refresh token invalid or expired"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "summary": "Revoke current session",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Session revoked",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "required": [
                            "revoked"
                          ],
                          "properties": {
                            "revoked": {
                              "type": "boolean"
                            },
                            "reason": {
                              "type": "string",
                              "nullable": true
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          }
        }
      }
    },
    "/auth/logout-all": {
      "post": {
        "summary": "Revoke other active sessions",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "includeCurrent": {
                    "type": "boolean",
                    "description": "Also revoke the session used for this request",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sessions revoked",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "required": [
                            "revokedCount",
                            "revokedSessionIds"
                          ],
                          "properties": {
                            "revokedCount": {
                              "type": "integer"
                            },
                            "revokedSessionIds": {
                              "type": "array",
                              "items": {
                                "type": "integer"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "summary": "Current user profile",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Profile retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardResponse"
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "List users",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 200,
              "default": 20
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Users returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardResponse"
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        }
      }
    },
    "/dashboard/me": {
      "get": {
        "summary": "Learner dashboard aggregate",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Dashboard snapshot",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/DashboardResponse"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          }
        }
      }
    },
    "/communities": {
      "get": {
        "summary": "Communities for current user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Communities retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardResponse"
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          }
        }
      },
      "post": {
        "summary": "Create community",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 150
                  },
                  "description": {
                    "type": "string"
                  },
                  "coverImageUrl": {
                    "type": "string",
                    "format": "uri"
                  },
                  "visibility": {
                    "type": "string",
                    "enum": [
                      "public",
                      "private"
                    ],
                    "default": "public"
                  },
                  "metadata": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Community created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardResponse"
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "409": {
            "description": "Community slug already exists"
          }
        }
      }
    },
    "/communities/feed": {
      "get": {
        "summary": "Aggregated community feed",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            }
          },
          {
            "name": "postType",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "update",
                "event",
                "resource",
                "classroom",
                "poll"
              ]
            },
            "required": false
          },
          {
            "name": "visibility",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "public",
                "members",
                "admins"
              ]
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Feed retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CommunityPost"
                          }
                        },
                        "meta": {
                          "type": "object",
                          "properties": {
                            "pagination": {
                              "type": "object",
                              "properties": {
                                "page": {
                                  "type": "integer"
                                },
                                "perPage": {
                                  "type": "integer"
                                },
                                "total": {
                                  "type": "integer"
                                },
                                "pageCount": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/communities/{communityId}": {
      "get": {
        "summary": "Community detail",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Community detail retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/CommunityDetail"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "403": {
            "description": "Community is private"
          },
          "404": {
            "description": "Community not found"
          }
        }
      }
    },
    "/communities/{communityId}/posts": {
      "get": {
        "summary": "Community feed",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            }
          },
          {
            "name": "channelId",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "required": false
          },
          {
            "name": "postType",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "update",
                "event",
                "resource",
                "classroom",
                "poll"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Community feed retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CommunityPost"
                          }
                        },
                        "meta": {
                          "type": "object",
                          "properties": {
                            "pagination": {
                              "type": "object",
                              "properties": {
                                "page": {
                                  "type": "integer"
                                },
                                "perPage": {
                                  "type": "integer"
                                },
                                "total": {
                                  "type": "integer"
                                },
                                "pageCount": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "403": {
            "description": "Community is private"
          },
          "404": {
            "description": "Community not found"
          },
          "422": {
            "description": "Validation error"
          }
        }
      },
      "post": {
        "summary": "Create community post",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "channelId": {
                    "type": "integer"
                  },
                  "postType": {
                    "type": "string",
                    "enum": [
                      "update",
                      "event",
                      "resource",
                      "classroom",
                      "poll"
                    ]
                  },
                  "title": {
                    "type": "string"
                  },
                  "body": {
                    "type": "string"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "visibility": {
                    "type": "string",
                    "enum": [
                      "public",
                      "members",
                      "admins"
                    ]
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "draft",
                      "scheduled",
                      "published"
                    ]
                  },
                  "scheduledAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "publishedAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "metadata": {
                    "type": "object"
                  }
                },
                "required": [
                  "body"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Post created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/CommunityPost"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Community not found"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/communities/{communityId}/resources": {
      "get": {
        "summary": "Community resources",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50,
              "default": 10
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "name": "resourceType",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "content_asset",
                "external_link",
                "document",
                "classroom_session"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resources retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CommunityResource"
                          }
                        },
                        "meta": {
                          "type": "object",
                          "properties": {
                            "pagination": {
                              "type": "object",
                              "properties": {
                                "limit": {
                                  "type": "integer"
                                },
                                "offset": {
                                  "type": "integer"
                                },
                                "total": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "403": {
            "description": "Community is private"
          },
          "404": {
            "description": "Community not found"
          },
          "422": {
            "description": "Validation error"
          }
        }
      },
      "post": {
        "summary": "Create community resource",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "resourceType": {
                    "type": "string",
                    "enum": [
                      "content_asset",
                      "external_link",
                      "document",
                      "classroom_session"
                    ]
                  },
                  "assetId": {
                    "type": "integer"
                  },
                  "linkUrl": {
                    "type": "string",
                    "format": "uri"
                  },
                  "classroomReference": {
                    "type": "string"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "visibility": {
                    "type": "string",
                    "enum": [
                      "members",
                      "admins"
                    ]
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "draft",
                      "published"
                    ]
                  },
                  "publishedAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "metadata": {
                    "type": "object"
                  }
                },
                "required": [
                  "title",
                  "resourceType"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Resource created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/CommunityResource"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Community not found"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/communities/{communityId}/chat/channels": {
      "get": {
        "summary": "List community chat channels",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Chat channels fetched",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CommunityChatChannelSummary"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "403": {
            "description": "Community access denied"
          },
          "404": {
            "description": "Community not found"
          }
        }
      }
    },
    "/communities/{communityId}/chat/channels/{channelId}/messages": {
      "get": {
        "summary": "List channel messages",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 50
            }
          },
          {
            "name": "before",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "after",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "threadRootId",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "includeHidden",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Set to true to include moderator-hidden messages alongside visible posts."
          }
        ],
        "responses": {
          "200": {
            "description": "Messages fetched",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CommunityChatMessageExtended"
                          }
                        },
                        "meta": {
                          "type": "object",
                          "properties": {
                            "pagination": {
                              "type": "object",
                              "properties": {
                                "limit": {
                                  "type": "integer"
                                },
                                "before": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "after": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "count": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "403": {
            "description": "Channel access denied"
          },
          "404": {
            "description": "Channel not found"
          }
        }
      },
      "post": {
        "summary": "Post channel message",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCommunityChatMessageRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Message created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/CommunityChatMessage"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "403": {
            "description": "Channel access denied"
          },
          "404": {
            "description": "Channel not found"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/communities/{communityId}/chat/channels/{channelId}/read": {
      "post": {
        "summary": "Mark channel as read",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommunityChatReadReceiptRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Read receipt stored",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/CommunityChannelMembership"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "403": {
            "description": "Channel access denied"
          },
          "404": {
            "description": "Channel not found"
          }
        }
      }
    },
    "/communities/{communityId}/chat/channels/{channelId}/messages/{messageId}/reactions": {
      "post": {
        "summary": "Add message reaction",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "messageId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommunityChatReactionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reaction added",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/CommunityChatReactionSummary"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "403": {
            "description": "Channel access denied"
          },
          "404": {
            "description": "Message not found"
          }
        }
      },
      "delete": {
        "summary": "Remove message reaction",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "messageId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommunityChatReactionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reaction removed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/CommunityChatReactionSummary"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "403": {
            "description": "Channel access denied"
          },
          "404": {
            "description": "Message not found"
          }
        }
      }
    },
    "/communities/{communityId}/chat/channels/{channelId}/messages/{messageId}/moderate": {
      "post": {
        "summary": "Moderate a community message",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "messageId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommunityChatModerationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Moderation applied",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/CommunityChatModerationResult"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Message not found"
          }
        }
      }
    },
    "/communities/{communityId}/chat/presence": {
      "get": {
        "summary": "List active presence sessions",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Presence fetched",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/PresenceSession"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "403": {
            "description": "Community access denied"
          },
          "404": {
            "description": "Community not found"
          }
        }
      },
      "post": {
        "summary": "Update presence state",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PresenceUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Presence updated",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/PresenceSession"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          }
        }
      }
    },
    "/communities/{communityId}/engagement/progress": {
      "get": {
        "summary": "Member engagement progress",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Engagement progress retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/CommunityEngagementProgress"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "403": {
            "description": "Community is private"
          },
          "404": {
            "description": "Community not found"
          }
        }
      }
    },
    "/communities/{communityId}/engagement/points": {
      "post": {
        "summary": "Award community points",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "integer",
                    "minimum": 1
                  },
                  "points": {
                    "type": "integer",
                    "minimum": -10000,
                    "maximum": 10000
                  },
                  "reason": {
                    "type": "string",
                    "maxLength": 240
                  },
                  "source": {
                    "type": "string",
                    "maxLength": 120
                  },
                  "referenceId": {
                    "type": "string",
                    "maxLength": 120
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": true
                  },
                  "contributesToStreak": {
                    "type": "boolean"
                  },
                  "activityAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "timezone": {
                    "type": "string"
                  }
                },
                "required": [
                  "userId",
                  "points"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Points awarded",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/CommunityPointAwardResult"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Community not found"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/communities/{communityId}/engagement/streaks/check-in": {
      "post": {
        "summary": "Record streak activity",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "activityAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "timezone": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Streak updated",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/CommunityStreak"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "404": {
            "description": "Community not found"
          }
        }
      }
    },
    "/communities/{communityId}/engagement/leaderboard": {
      "get": {
        "summary": "Community leaderboard",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "points",
                "lifetime",
                "streak",
                "attendance"
              ],
              "default": "points"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Leaderboard calculated",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CommunityLeaderboardEntry"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "404": {
            "description": "Community not found"
          }
        }
      }
    },
    "/communities/{communityId}/events": {
      "get": {
        "summary": "List community events",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 200,
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "scheduled",
                "cancelled",
                "completed"
              ]
            }
          },
          {
            "name": "visibility",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "members",
                "admins",
                "owners"
              ]
            }
          },
          {
            "name": "order",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Community events returned",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CommunityEventDetail"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "404": {
            "description": "Community not found"
          }
        }
      },
      "post": {
        "summary": "Create community event",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "maxLength": 200
                  },
                  "slug": {
                    "type": "string"
                  },
                  "summary": {
                    "type": "string",
                    "maxLength": 500
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 8000
                  },
                  "startAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "endAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "timezone": {
                    "type": "string"
                  },
                  "visibility": {
                    "type": "string",
                    "enum": [
                      "members",
                      "admins",
                      "owners"
                    ],
                    "default": "members"
                  },
                  "attendanceLimit": {
                    "type": "integer",
                    "minimum": 1
                  },
                  "requiresRsvp": {
                    "type": "boolean"
                  },
                  "isOnline": {
                    "type": "boolean"
                  },
                  "meetingUrl": {
                    "type": "string",
                    "format": "uri"
                  },
                  "locationName": {
                    "type": "string",
                    "maxLength": 200
                  },
                  "locationAddress": {
                    "type": "string",
                    "maxLength": 500
                  },
                  "locationLatitude": {
                    "type": "number"
                  },
                  "locationLongitude": {
                    "type": "number"
                  },
                  "coverImageUrl": {
                    "type": "string",
                    "format": "uri"
                  },
                  "recurrenceRule": {
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": true
                  }
                },
                "required": [
                  "title",
                  "startAt",
                  "endAt"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Event created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/CommunityEventDetail"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Community not found"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/communities/{communityId}/events/{eventId}/rsvp": {
      "post": {
        "summary": "RSVP to community event",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "going",
                      "interested",
                      "waitlisted",
                      "declined",
                      "checked_in"
                    ]
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "RSVP stored",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/CommunityEventParticipant"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "404": {
            "description": "Event not found"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/communities/{communityId}/events/{eventId}/reminders": {
      "post": {
        "summary": "Schedule event reminder",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "remindAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "channel": {
                    "type": "string",
                    "enum": [
                      "email",
                      "push",
                      "sms"
                    ]
                  },
                  "metadata": {
                    "type": "object",
                    "additionalProperties": true
                  }
                },
                "required": [
                  "remindAt"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Reminder scheduled",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/CommunityEventReminder"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "404": {
            "description": "Event not found"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/communities/{communityId}/calendar": {
      "get": {
        "summary": "Community calendar",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "month",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 12
            }
          },
          {
            "name": "year",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 2020,
              "maximum": 2100
            }
          },
          {
            "name": "visibility",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "members",
                "admins",
                "owners"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Calendar compiled",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/CommunityCalendar"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "404": {
            "description": "Community not found"
          }
        }
      }
    },
    "/content/assets": {
      "get": {
        "summary": "List content assets",
        "description": "Requires instructor or admin Learnspace access.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Assets returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardResponse"
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "403": {
            "description": "Instructor or admin permissions required"
          }
        }
      }
    },
    "/content/assets/upload-session": {
      "post": {
        "summary": "Create signed upload session",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "filename",
                  "mimeType",
                  "size"
                ],
                "properties": {
                  "type": {
                    "type": "string"
                  },
                  "filename": {
                    "type": "string"
                  },
                  "mimeType": {
                    "type": "string"
                  },
                  "size": {
                    "type": "integer"
                  },
                  "checksum": {
                    "type": "string"
                  },
                  "visibility": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Upload session created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardResponse"
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/content/assets/{assetId}/ingest": {
      "post": {
        "summary": "Confirm upload and queue ingestion",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "checksum": {
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Asset queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardResponse"
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/content/assets/{assetId}": {
      "get": {
        "summary": "Retrieve content asset",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Asset detail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardResponse"
                }
              }
            }
          },
          "404": {
            "description": "Asset not found"
          }
        }
      }
    },
    "/content/assets/{assetId}/viewer-token": {
      "get": {
        "summary": "Generate viewer token",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Viewer token issued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Asset not found"
          }
        }
      }
    },
    "/content/assets/{assetId}/progress": {
      "get": {
        "summary": "Retrieve ebook progress",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Progress retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardResponse"
                }
              }
            }
          },
          "404": {
            "description": "Asset not found"
          }
        }
      },
      "post": {
        "summary": "Update ebook progress",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "progressPercent": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 100
                  },
                  "lastLocation": {
                    "type": "string",
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Progress stored"
          },
          "404": {
            "description": "Asset not found"
          }
        }
      }
    },
    "/content/assets/{assetId}/events": {
      "post": {
        "summary": "Record asset event",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "eventType"
                ],
                "properties": {
                  "eventType": {
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Event captured"
          },
          "404": {
            "description": "Asset not found"
          }
        }
      }
    },
    "/content/assets/{assetId}/analytics": {
      "get": {
        "summary": "Content analytics",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Analytics payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardResponse"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Asset not found"
          }
        }
      }
    },
    "/auth/verify-email": {
      "post": {
        "summary": "Confirm email ownership",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "Verification token received via email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email verified",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "required": [
                            "user",
                            "verification"
                          ],
                          "properties": {
                            "user": {
                              "$ref": "#/components/schemas/User"
                            },
                            "verification": {
                              "$ref": "#/components/schemas/VerificationStatus"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "410": {
            "description": "Token expired or already used"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/auth/resend-verification": {
      "post": {
        "summary": "Resend verification email",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Resend processed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "required": [
                            "delivered",
                            "expiresAt"
                          ],
                          "properties": {
                            "delivered": {
                              "type": "boolean"
                            },
                            "expiresAt": {
                              "type": "string",
                              "format": "date-time",
                              "nullable": true
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Validation error"
          },
          "429": {
            "description": "Too many requests"
          }
        }
      }
    },
    "/communities/{communityId}/roles": {
      "get": {
        "summary": "List community roles",
        "tags": [
          "Communities"
        ],
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Roles fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/CommunityRoleCollection"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create community role",
        "tags": [
          "Communities"
        ],
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "roleKey": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "permissions": {
                    "type": "object"
                  },
                  "isDefaultAssignable": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Role created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/CommunityRoleDefinition"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/communities/{communityId}/members/{userId}/role": {
      "patch": {
        "summary": "Assign community member role",
        "tags": [
          "Communities"
        ],
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "roleKey": {
                    "type": "string"
                  }
                },
                "required": [
                  "roleKey"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Role updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/CommunityRoleAssignment"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/communities/{communityId}/paywall/tiers": {
      "get": {
        "summary": "List community paywall tiers",
        "tags": [
          "Communities"
        ],
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeInactive",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paywall tiers fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CommunityPaywallTier"
                      }
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create paywall tier",
        "tags": [
          "Communities"
        ],
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommunityPaywallTierInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Tier created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/CommunityPaywallTier"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/communities/{communityId}/paywall/tiers/{tierId}": {
      "patch": {
        "summary": "Update paywall tier",
        "tags": [
          "Communities"
        ],
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tierId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommunityPaywallTierUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tier updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/CommunityPaywallTier"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/communities/{communityId}/paywall/checkout": {
      "post": {
        "summary": "Start subscription checkout",
        "tags": [
          "Communities"
        ],
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tierId": {
                    "type": "integer"
                  },
                  "provider": {
                    "type": "string"
                  },
                  "couponCode": {
                    "type": "string"
                  },
                  "tax": {
                    "type": "object"
                  },
                  "receiptEmail": {
                    "type": "string"
                  },
                  "affiliateCode": {
                    "type": "string"
                  }
                },
                "required": [
                  "tierId",
                  "provider"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Checkout started",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/CommunitySubscriptionCheckoutResponse"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/communities/{communityId}/subscriptions/me": {
      "get": {
        "summary": "List my community subscriptions",
        "tags": [
          "Communities"
        ],
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscriptions fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CommunitySubscription"
                      }
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/communities/{communityId}/subscriptions/{subscriptionId}/cancel": {
      "post": {
        "summary": "Cancel community subscription",
        "tags": [
          "Communities"
        ],
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "cancelAtPeriodEnd": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscription updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/CommunitySubscription"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/communities/{communityId}/affiliates": {
      "get": {
        "summary": "List community affiliates",
        "tags": [
          "Communities"
        ],
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Affiliates fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CommunityAffiliate"
                      }
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/communities/{communityId}/affiliates/apply": {
      "post": {
        "summary": "Apply to community affiliate program",
        "tags": [
          "Communities"
        ],
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "referralCode": {
                    "type": "string"
                  },
                  "commissionRateBasisPoints": {
                    "type": "integer"
                  },
                  "metadata": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Affiliate application created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/CommunityAffiliate"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/communities/{communityId}/affiliates/{affiliateId}": {
      "patch": {
        "summary": "Update community affiliate",
        "tags": [
          "Communities"
        ],
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "affiliateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string"
                  },
                  "commissionRateBasisPoints": {
                    "type": "integer"
                  },
                  "referralCode": {
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Affiliate updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/CommunityAffiliate"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/communities/{communityId}/affiliates/{affiliateId}/payouts": {
      "post": {
        "summary": "Record affiliate payout",
        "tags": [
          "Communities"
        ],
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "affiliateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amountCents": {
                    "type": "integer"
                  },
                  "status": {
                    "type": "string"
                  },
                  "payoutReference": {
                    "type": "string"
                  },
                  "scheduledAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "processedAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "failureReason": {
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object"
                  }
                },
                "required": [
                  "amountCents"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payout recorded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/CommunityAffiliatePayout"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/chat/threads": {
      "get": {
        "summary": "List direct message threads",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Threads fetched",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/DirectMessageThreadSummary"
                          }
                        },
                        "meta": {
                          "type": "object",
                          "properties": {
                            "pagination": {
                              "type": "object",
                              "properties": {
                                "limit": {
                                  "type": "integer"
                                },
                                "offset": {
                                  "type": "integer"
                                },
                                "count": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          }
        }
      },
      "post": {
        "summary": "Create or reuse a direct message thread",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DirectMessageThreadRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Thread ready",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/DirectMessageThreadCreationResult"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "404": {
            "description": "Participant not found"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/chat/threads/{threadId}/messages": {
      "get": {
        "summary": "List messages in a direct message thread",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threadId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 200,
              "default": 50
            }
          },
          {
            "name": "before",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "after",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Messages fetched",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/DirectMessage"
                          }
                        },
                        "meta": {
                          "type": "object",
                          "properties": {
                            "pagination": {
                              "type": "object",
                              "properties": {
                                "limit": {
                                  "type": "integer"
                                },
                                "before": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "after": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "count": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "403": {
            "description": "Thread access denied"
          },
          "404": {
            "description": "Thread not found"
          }
        }
      },
      "post": {
        "summary": "Send a direct message",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threadId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DirectMessageRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Message sent",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/DirectMessage"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "403": {
            "description": "Thread access denied"
          },
          "404": {
            "description": "Thread not found"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/chat/threads/{threadId}/read": {
      "post": {
        "summary": "Mark a thread as read",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "threadId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DirectMessageReadRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Thread read receipt stored",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/DirectMessageReadReceipt"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "403": {
            "description": "Thread access denied"
          },
          "404": {
            "description": "Thread not found"
          }
        }
      }
    },
    "/social/followers": {
      "get": {
        "summary": "Followers for current user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum records to return",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 500
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "accepted",
                "declined"
              ]
            }
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Followers retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/FollowListItem"
                          }
                        },
                        "meta": {
                          "type": "object",
                          "properties": {
                            "pagination": {
                              "type": "object",
                              "properties": {
                                "limit": {
                                  "type": "integer",
                                  "example": 25
                                },
                                "offset": {
                                  "type": "integer",
                                  "example": 0
                                },
                                "total": {
                                  "type": "integer",
                                  "example": 120
                                }
                              }
                            },
                            "viewerContext": {
                              "$ref": "#/components/schemas/FollowViewerContext"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          }
        }
      }
    },
    "/social/users/{userId}/followers": {
      "get": {
        "summary": "Followers for specified user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum records to return",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 500
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "accepted",
                "declined"
              ]
            }
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Followers retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/FollowListItem"
                          }
                        },
                        "meta": {
                          "type": "object",
                          "properties": {
                            "pagination": {
                              "type": "object",
                              "properties": {
                                "limit": {
                                  "type": "integer",
                                  "example": 25
                                },
                                "offset": {
                                  "type": "integer",
                                  "example": 0
                                },
                                "total": {
                                  "type": "integer",
                                  "example": 120
                                }
                              }
                            },
                            "viewerContext": {
                              "$ref": "#/components/schemas/FollowViewerContext"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          }
        }
      }
    },
    "/social/following": {
      "get": {
        "summary": "Accounts the current user follows",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum records to return",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 500
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "accepted",
                "declined"
              ]
            }
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Following retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/FollowListItem"
                          }
                        },
                        "meta": {
                          "type": "object",
                          "properties": {
                            "pagination": {
                              "type": "object",
                              "properties": {
                                "limit": {
                                  "type": "integer",
                                  "example": 25
                                },
                                "offset": {
                                  "type": "integer",
                                  "example": 0
                                },
                                "total": {
                                  "type": "integer",
                                  "example": 120
                                }
                              }
                            },
                            "viewerContext": {
                              "$ref": "#/components/schemas/FollowViewerContext"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          }
        }
      }
    },
    "/social/users/{userId}/following": {
      "get": {
        "summary": "Accounts a specific user follows",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum records to return",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 500
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "accepted",
                "declined"
              ]
            }
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Following retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/FollowListItem"
                          }
                        },
                        "meta": {
                          "type": "object",
                          "properties": {
                            "pagination": {
                              "type": "object",
                              "properties": {
                                "limit": {
                                  "type": "integer",
                                  "example": 25
                                },
                                "offset": {
                                  "type": "integer",
                                  "example": 0
                                },
                                "total": {
                                  "type": "integer",
                                  "example": 120
                                }
                              }
                            },
                            "viewerContext": {
                              "$ref": "#/components/schemas/FollowViewerContext"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          }
        }
      }
    },
    "/social/recommendations": {
      "get": {
        "summary": "Recommended accounts to follow",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Recommendations generated",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/FollowRecommendationItem"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          }
        }
      }
    },
    "/social/follows/{userId}": {
      "post": {
        "summary": "Follow a user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FollowRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Follow relationship processed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/FollowRelationship"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "202": {
            "description": "Follow request pending approval",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/FollowRelationship"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          }
        }
      },
      "delete": {
        "summary": "Unfollow a user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Follow removed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardResponse"
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          }
        }
      }
    },
    "/social/users/{userId}/followers/{followerId}/approve": {
      "post": {
        "summary": "Approve pending follow",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "followerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Follow request approved",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/FollowRelationship"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          }
        }
      }
    },
    "/social/users/{userId}/followers/{followerId}/decline": {
      "post": {
        "summary": "Decline pending follow",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "followerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Follow request declined",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/FollowRelationship"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          }
        }
      }
    },
    "/social/mutes/{userId}": {
      "post": {
        "summary": "Mute notifications from a user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MuteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Mute applied",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "userId": {
                              "type": "integer",
                              "example": 42
                            },
                            "mutedUserId": {
                              "type": "integer",
                              "example": 91
                            },
                            "mutedUntil": {
                              "type": "string",
                              "format": "date-time",
                              "nullable": true
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          }
        }
      },
      "delete": {
        "summary": "Remove mute for a user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mute removed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardResponse"
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          }
        }
      }
    },
    "/social/blocks/{userId}": {
      "post": {
        "summary": "Block a user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlockRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User blocked",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "userId": {
                              "type": "integer",
                              "example": 42
                            },
                            "blockedUserId": {
                              "type": "integer",
                              "example": 91
                            },
                            "blockedAt": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          }
        }
      },
      "delete": {
        "summary": "Unblock a user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User unblocked",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardResponse"
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          }
        }
      }
    },
    "/social/privacy": {
      "get": {
        "summary": "Get privacy settings for current user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Privacy settings retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/SocialPrivacySettings"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          }
        }
      },
      "put": {
        "summary": "Update privacy settings for current user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SocialPrivacyUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Privacy settings retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/SocialPrivacySettings"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          }
        }
      }
    },
    "/social/users/{userId}/privacy": {
      "get": {
        "summary": "Get privacy settings for specific user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Privacy settings retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/SocialPrivacySettings"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          }
        }
      },
      "put": {
        "summary": "Update privacy settings for specific user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SocialPrivacyUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Privacy settings retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/SocialPrivacySettings"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          }
        }
      }
    },
    "/feed": {
      "get": {
        "summary": "Retrieve aggregated live feed snapshot",
        "description": "Returns a paginated feed composed of community posts, inline ad placements, and optional analytics highlights.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "description": "Feed context to aggregate.",
            "schema": {
              "type": "string",
              "enum": [
                "global",
                "community"
              ],
              "default": "global"
            }
          },
          {
            "name": "community",
            "in": "query",
            "description": "Community slug or ID when retrieving a community feed.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 50,
              "default": 20
            }
          },
          {
            "name": "includeAnalytics",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "includeHighlights",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "range",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "7d",
                "30d",
                "90d",
                "180d",
                "365d"
              ],
              "default": "30d"
            }
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "postType",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Feed snapshot generated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeedSnapshotResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Feed capability disabled"
          }
        }
      }
    },
    "/feed/analytics": {
      "get": {
        "summary": "Compute feed analytics",
        "description": "Returns engagement and ad performance analytics for the requested feed context.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "global",
                "community"
              ],
              "default": "global"
            }
          },
          {
            "name": "community",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "range",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "7d",
                "30d",
                "90d",
                "180d",
                "365d"
              ],
              "default": "30d"
            }
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "postType",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Feed analytics generated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeedAnalyticsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "403": {
            "description": "Feed capability disabled"
          }
        }
      }
    },
    "/feed/placements": {
      "get": {
        "summary": "Resolve eligible ad placements",
        "description": "Returns ad placements ranked for the supplied feed context.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "context",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "global_feed",
                "community_feed",
                "search",
                "course_live"
              ],
              "default": "global_feed"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 10,
              "default": 3
            }
          },
          {
            "name": "keywords",
            "in": "query",
            "description": "Comma separated keyword hints to improve targeting matches.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Eligible placements resolved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeedPlacementsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          }
        }
      }
    },
    "/explorer/search": {
      "post": {
        "tags": [
          "Explorer"
        ],
        "summary": "Federated explorer search",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExplorerSearchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Explorer results returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/ExplorerSearchResponse"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardResponse"
                }
              }
            }
          }
        }
      }
    },
    "/explorer/saved-searches": {
      "get": {
        "tags": [
          "Explorer"
        ],
        "summary": "List saved explorer searches",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Saved searches retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/SavedExplorerSearch"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          }
        }
      },
      "post": {
        "tags": [
          "Explorer"
        ],
        "summary": "Create a saved explorer search",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SavedExplorerSearchRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Saved search created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/SavedExplorerSearch"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "409": {
            "description": "Saved search name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardResponse"
                }
              }
            }
          }
        }
      }
    },
    "/explorer/saved-searches/{savedSearchId}": {
      "parameters": [
        {
          "name": "savedSearchId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 1
          }
        }
      ],
      "get": {
        "tags": [
          "Explorer"
        ],
        "summary": "Get a saved explorer search",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Saved search retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/SavedExplorerSearch"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "404": {
            "description": "Saved search not found"
          }
        }
      },
      "patch": {
        "tags": [
          "Explorer"
        ],
        "summary": "Update a saved explorer search",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SavedExplorerSearchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Saved search updated",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/SavedExplorerSearch"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "404": {
            "description": "Saved search not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Explorer"
        ],
        "summary": "Delete a saved explorer search",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Saved search deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "404": {
            "description": "Saved search not found"
          }
        }
      }
    },
    "/analytics/explorer/summary": {
      "get": {
        "tags": [
          "Analytics"
        ],
        "summary": "Retrieve explorer analytics summary",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "range",
            "in": "query",
            "description": "Rolling time window (7d, 14d, or 30d)",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "7d",
                "14d",
                "30d"
              ],
              "default": "7d"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Explorer analytics summary returned",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/ExplorerAnalyticsSummary"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardResponse"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/explorer/alerts": {
      "get": {
        "tags": [
          "Analytics"
        ],
        "summary": "List explorer analytics alerts",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "includeResolved",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Explorer analytics alerts fetched",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ExplorerAnalyticsAlert"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardResponse"
                }
              }
            }
          }
        }
      }
    },
    "/analytics/explorer/interactions": {
      "post": {
        "tags": [
          "Analytics"
        ],
        "summary": "Record an explorer interaction event",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExplorerInteractionRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Interaction recorded",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/ExplorerInteractionRecord"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Search event not found"
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ads/campaigns": {
      "get": {
        "tags": [
          "Ads"
        ],
        "summary": "List campaigns for the authenticated instructor",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Optional comma separated list of campaign statuses"
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Campaign list retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/AdsCampaign"
                          }
                        },
                        "meta": {
                          "type": "object",
                          "properties": {
                            "pagination": {
                              "type": "object",
                              "properties": {
                                "page": {
                                  "type": "integer"
                                },
                                "limit": {
                                  "type": "integer"
                                },
                                "total": {
                                  "type": "integer"
                                },
                                "totalPages": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Ads"
        ],
        "summary": "Create a new ad campaign",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAdsCampaignRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Campaign created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/AdsCampaign"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/ads/campaigns/{campaignId}": {
      "get": {
        "tags": [
          "Ads"
        ],
        "summary": "Get campaign detail",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Campaign fetched",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/AdsCampaign"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "Ads"
        ],
        "summary": "Update an ad campaign",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAdsCampaignRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Campaign updated",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/AdsCampaign"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/ads/campaigns/{campaignId}/pause": {
      "post": {
        "tags": [
          "Ads"
        ],
        "summary": "Pause a campaign",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Campaign paused",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/AdsCampaign"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/ads/campaigns/{campaignId}/resume": {
      "post": {
        "tags": [
          "Ads"
        ],
        "summary": "Resume a campaign",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Campaign resumed",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/AdsCampaign"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/ads/campaigns/{campaignId}/metrics": {
      "post": {
        "tags": [
          "Ads"
        ],
        "summary": "Record daily metrics",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecordAdsMetricsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Metrics recorded",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/AdsCampaign"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/ads/campaigns/{campaignId}/insights": {
      "get": {
        "tags": [
          "Ads"
        ],
        "summary": "Fetch rolling performance insights",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "windowDays",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 60
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Insights generated",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/AdsInsightsResponse"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/verification/me": {
      "get": {
        "summary": "Identity verification summary",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/VerificationSummary"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          }
        }
      }
    },
    "/verification/me/upload-requests": {
      "post": {
        "summary": "Request presigned upload for verification documents",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "documentType": {
                    "type": "string"
                  },
                  "fileName": {
                    "type": "string"
                  },
                  "mimeType": {
                    "type": "string"
                  },
                  "sizeBytes": {
                    "type": "integer"
                  }
                },
                "required": [
                  "documentType",
                  "fileName",
                  "mimeType",
                  "sizeBytes"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Operation successful",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/VerificationUploadResponse"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid upload request"
          },
          "401": {
            "description": "Missing or invalid token"
          }
        }
      }
    },
    "/verification/me/documents": {
      "post": {
        "summary": "Attach uploaded verification document metadata",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "documentType": {
                    "type": "string"
                  },
                  "storageBucket": {
                    "type": "string"
                  },
                  "storageKey": {
                    "type": "string"
                  },
                  "fileName": {
                    "type": "string"
                  },
                  "mimeType": {
                    "type": "string"
                  },
                  "sizeBytes": {
                    "type": "integer"
                  },
                  "checksumSha256": {
                    "type": "string"
                  }
                },
                "required": [
                  "documentType",
                  "storageBucket",
                  "storageKey",
                  "fileName",
                  "mimeType",
                  "sizeBytes",
                  "checksumSha256"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Operation successful",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/VerificationSummary"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid document payload"
          },
          "401": {
            "description": "Missing or invalid token"
          }
        }
      }
    },
    "/verification/me/submit": {
      "post": {
        "summary": "Submit verification for manual review",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/VerificationSummary"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Verification is not ready for review"
          },
          "401": {
            "description": "Missing or invalid token"
          }
        }
      }
    },
    "/verification/admin/overview": {
      "get": {
        "summary": "Administrative verification overview",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/VerificationAdminOverview"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        }
      }
    },
    "/verification/{verificationId}/review": {
      "post": {
        "summary": "Review verification submission",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "verificationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Verification record identifier"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerificationReviewRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Operation successful",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/VerificationSummary"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid review payload"
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Verification record not found"
          }
        }
      }
    },
    "/verification/{verificationId}/audit": {
      "get": {
        "summary": "Verification audit trail",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "verificationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Verification record identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/VerificationAuditEntry"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Verification record not found"
          }
        }
      }
    },
    "/ebooks": {
      "get": {
        "summary": "List published ebooks",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categories",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Comma separated list of categories"
          },
          {
            "name": "tags",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Comma separated list of tags"
          },
          {
            "name": "languages",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Comma separated ISO language codes"
          },
          {
            "name": "minPrice",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "float"
            }
          },
          {
            "name": "maxPrice",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "float"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 200
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Marketplace catalogue fetched",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/EbookListing"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create ebook listing",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EbookCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Ebook listing created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/EbookListing"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Asset not found"
          },
          "409": {
            "description": "Listing already exists"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/ebooks/catalogue": {
      "get": {
        "summary": "List instructor ebook catalogue",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 200
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ebook catalogue fetched",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/EbookCatalogueResponse"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        }
      }
    },
    "/ebooks/{ebookId}": {
      "patch": {
        "summary": "Update ebook listing",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "ebookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EbookUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ebook listing updated",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/EbookListing"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Ebook not found"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/ebooks/{ebookId}/state": {
      "post": {
        "summary": "Update ebook publication state",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "ebookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EbookStateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ebook state updated",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/EbookListing"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Ebook not found"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/ebooks/{ebookId}/purchase-intent": {
      "post": {
        "summary": "Create ebook purchase intent",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "ebookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EbookPurchaseIntentRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Purchase intent created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/EbookPurchaseIntentResponse"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Ebook not found"
          },
          "409": {
            "description": "Ebook unavailable"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/ebooks/slug/{slug}": {
      "get": {
        "summary": "Retrieve ebook details",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ebook fetched",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/EbookListing"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Ebook not found"
          }
        }
      }
    },
    "/runtime/manifest": {
      "get": {
        "summary": "Capability manifest and service health",
        "description": "Returns aggregated readiness, incident, and capability exposure data so clients can render service health indicators and gate features consistently.",
        "responses": {
          "200": {
            "description": "Capability manifest generated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/CapabilityManifest"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Capability manifest could not be generated."
          }
        },
        "operationId": "getRuntimeCapabilityManifest"
      }
    },
    "/creation/recommendations": {
      "get": {
        "summary": "Fetch creation studio recommendations",
        "description": "Returns prioritised actions for instructors based on project lifecycle, marketing coverage, and recency signals. Evaluations are gated by the `creation.recommendations` feature flag.",
        "operationId": "getCreationRecommendations",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 20
            },
            "description": "Maximum number of recommendations to return (default 5)."
          },
          {
            "name": "includeHistory",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "When true, include recent generation metadata for observability."
          },
          {
            "name": "ownerId",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "description": "Admin-only override to evaluate recommendations for a specific instructor."
          }
        ],
        "responses": {
          "200": {
            "description": "Recommendations generated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreationRecommendationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/observability/slos": {
      "get": {
        "summary": "Service level objectives",
        "description": "Returns the most recent error budget and latency snapshots for registered SLOs.",
        "tags": [
          "Observability"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "includeDefinition",
            "in": "query",
            "required": false,
            "description": "When true, include indicator and alert configuration with each snapshot.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Current SLO snapshots.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObservabilitySloListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        }
      }
    },
    "/observability/slos/{sloId}": {
      "get": {
        "summary": "Service level objective detail",
        "description": "Returns the current snapshot for a specific service level objective.",
        "tags": [
          "Observability"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "sloId",
            "in": "path",
            "required": true,
            "description": "Identifier of the service level objective to inspect.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeDefinition",
            "in": "query",
            "required": false,
            "description": "When true, include indicator and alert configuration with the snapshot.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SLO snapshot.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObservabilitySloDetailResponse"
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "SLO not found"
          }
        }
      }
    },
    "/security/risk-register": {
      "get": {
        "tags": [
          "Security Operations"
        ],
        "summary": "List risk register entries",
        "operationId": "listSecurityRisks",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Tenant scope override."
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 200
            },
            "description": "Maximum number of risks to return."
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "description": "Offset for pagination."
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by risk status."
          },
          {
            "name": "category",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by risk category."
          },
          {
            "name": "ownerId",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by risk owner id."
          },
          {
            "name": "tag",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by risk tag."
          },
          {
            "name": "severity",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by inherent severity."
          },
          {
            "name": "includeClosed",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "When false, hides closed/retired risks."
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "residualRisk",
                "inherentRisk",
                "updatedAt",
                "createdAt",
                "nextReviewAt",
                "status"
              ]
            },
            "description": "Sort column."
          },
          {
            "name": "sortDirection",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "description": "Sort direction."
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Full-text search over titles and descriptions."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/SecurityRiskListResponse"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Security Operations"
        ],
        "summary": "Create a risk register entry",
        "operationId": "createSecurityRisk",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "title",
                  "description"
                ],
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "category": {
                    "type": "string"
                  },
                  "severity": {
                    "type": "string"
                  },
                  "likelihood": {
                    "type": "string"
                  },
                  "reviewCadenceDays": {
                    "type": "integer"
                  },
                  "mitigationPlan": {
                    "type": "string"
                  },
                  "residualNotes": {
                    "type": "string"
                  },
                  "regulatoryDriver": {
                    "type": "string"
                  },
                  "detectionControls": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "mitigationControls": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "owner": {
                    "$ref": "#/components/schemas/SecurityRiskOwner"
                  },
                  "metadata": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Risk entry created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/SecurityRiskRecord"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/security/risk-register/{riskId}/status": {
      "patch": {
        "tags": [
          "Security Operations"
        ],
        "summary": "Update a risk status and residual profile",
        "operationId": "updateSecurityRiskStatus",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "riskId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Numeric identifier for the risk."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "status"
                ],
                "properties": {
                  "status": {
                    "type": "string"
                  },
                  "residualSeverity": {
                    "type": "string"
                  },
                  "residualLikelihood": {
                    "type": "string"
                  },
                  "residualNotes": {
                    "type": "string"
                  },
                  "mitigationPlan": {
                    "type": "string"
                  },
                  "nextReviewAt": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Risk entry updated",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/SecurityRiskRecord"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/security/risk-register/{riskId}/reviews": {
      "post": {
        "tags": [
          "Security Operations"
        ],
        "summary": "Record a risk review and update residual scoring",
        "operationId": "recordSecurityRiskReview",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "riskId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Numeric identifier for the risk."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string"
                  },
                  "residualSeverity": {
                    "type": "string"
                  },
                  "residualLikelihood": {
                    "type": "string"
                  },
                  "notes": {
                    "type": "string"
                  },
                  "evidenceReferences": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "reviewer": {
                    "$ref": "#/components/schemas/SecurityRiskOwner"
                  },
                  "nextReviewAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "reviewedAt": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "review": {
                              "$ref": "#/components/schemas/SecurityRiskReviewRecord"
                            },
                            "risk": {
                              "$ref": "#/components/schemas/SecurityRiskRecord"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/security/audit-evidence": {
      "get": {
        "tags": [
          "Security Operations"
        ],
        "summary": "List audit evidence records",
        "operationId": "listSecurityAuditEvidence",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Tenant scope override."
          },
          {
            "name": "framework",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by compliance framework."
          },
          {
            "name": "controlReference",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by control reference."
          },
          {
            "name": "riskId",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by risk id."
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by evidence status."
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 200
            },
            "description": "Maximum number of evidence records."
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "description": "Offset for pagination."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/SecurityAuditEvidenceList"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Security Operations"
        ],
        "summary": "Record audit evidence metadata",
        "operationId": "recordSecurityAuditEvidence",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "storagePath"
                ],
                "properties": {
                  "riskId": {
                    "type": "integer"
                  },
                  "framework": {
                    "type": "string"
                  },
                  "controlReference": {
                    "type": "string"
                  },
                  "evidenceType": {
                    "type": "string"
                  },
                  "storagePath": {
                    "type": "string"
                  },
                  "checksum": {
                    "type": "string"
                  },
                  "sources": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "capturedAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "expiresAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "status": {
                    "type": "string"
                  },
                  "submittedBy": {
                    "type": "integer"
                  },
                  "submittedByEmail": {
                    "type": "string",
                    "format": "email"
                  },
                  "description": {
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Evidence recorded",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/SecurityAuditEvidence"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/security/continuity/exercises": {
      "get": {
        "tags": [
          "Security Operations"
        ],
        "summary": "List business continuity exercises",
        "operationId": "listSecurityContinuityExercises",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Tenant scope override."
          },
          {
            "name": "outcome",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by exercise outcome."
          },
          {
            "name": "ownerId",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by owner id."
          },
          {
            "name": "since",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Return exercises started after this timestamp."
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 200
            },
            "description": "Maximum number of exercises to return."
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "description": "Offset for pagination."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/SecurityContinuityResponse"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Security Operations"
        ],
        "summary": "Log a business continuity exercise",
        "operationId": "logSecurityContinuityExercise",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "scenarioKey",
                  "scenarioSummary"
                ],
                "properties": {
                  "scenarioKey": {
                    "type": "string"
                  },
                  "scenarioSummary": {
                    "type": "string"
                  },
                  "exerciseType": {
                    "type": "string"
                  },
                  "startedAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "completedAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "rtoTargetMinutes": {
                    "type": "integer"
                  },
                  "rpoTargetMinutes": {
                    "type": "integer"
                  },
                  "actualRtoMinutes": {
                    "type": "integer"
                  },
                  "actualRpoMinutes": {
                    "type": "integer"
                  },
                  "outcome": {
                    "type": "string"
                  },
                  "lessonsLearned": {
                    "type": "string"
                  },
                  "followUpActions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "owner": {
                    "$ref": "#/components/schemas/SecurityRiskOwner"
                  },
                  "metadata": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Continuity exercise recorded",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/SecurityContinuityExercise"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/security/assessments": {
      "get": {
        "tags": [
          "Security Operations"
        ],
        "summary": "List security assessments",
        "operationId": "listSecurityAssessments",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Tenant scope override."
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by assessment status."
          },
          {
            "name": "assessmentType",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by assessment type."
          },
          {
            "name": "scheduledFrom",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Assessments scheduled after this timestamp."
          },
          {
            "name": "scheduledTo",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Assessments scheduled before this timestamp."
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 200
            },
            "description": "Maximum assessments to return."
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "description": "Offset for pagination."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/SecurityAssessmentList"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Security Operations"
        ],
        "summary": "Schedule a security assessment",
        "operationId": "scheduleSecurityAssessment",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assessmentType",
                  "scheduledFor"
                ],
                "properties": {
                  "assessmentType": {
                    "type": "string"
                  },
                  "scheduledFor": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "status": {
                    "type": "string"
                  },
                  "owner": {
                    "$ref": "#/components/schemas/SecurityRiskOwner"
                  },
                  "scope": {
                    "type": "string"
                  },
                  "methodology": {
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Assessment scheduled",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StandardResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/SecurityAssessment"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/telemetry/events": {
      "post": {
        "summary": "Ingest telemetry event",
        "description": "Registers a telemetry event for downstream export while enforcing consent and deduplication policies.",
        "tags": ["Telemetry"],
        "security": [
          { "bearerAuth": [] }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TelemetryEventIngestRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Telemetry event accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TelemetryEventIngestResponse"
                }
              }
            }
          },
          "200": {
            "description": "Duplicate telemetry event acknowledged",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TelemetryEventIngestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Telemetry source not authorised"
          },
          "422": {
            "description": "Invalid telemetry payload"
          },
          "503": {
            "description": "Telemetry pipeline disabled"
          }
        }
      }
    },
    "/telemetry/consents": {
      "post": {
        "summary": "Record telemetry consent decision",
        "tags": ["Telemetry"],
        "security": [
          { "bearerAuth": [] }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TelemetryConsentRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Consent decision recorded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "consent": {
                      "$ref": "#/components/schemas/TelemetryConsentRecord"
                    }
                  },
                  "required": ["consent"]
                }
              }
            }
          },
          "400": {
            "description": "User context missing"
          },
          "422": {
            "description": "Invalid consent payload"
          }
        }
      }
    },
    "/telemetry/freshness": {
      "get": {
        "summary": "List telemetry freshness monitors",
        "tags": ["Telemetry"],
        "security": [
          { "bearerAuth": [] }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 200,
              "default": 50
            },
            "description": "Maximum number of freshness monitors to return."
          }
        ],
        "responses": {
          "200": {
            "description": "Telemetry freshness monitors retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "monitors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TelemetryFreshnessMonitor"
                      }
                    }
                  },
                  "required": ["monitors"]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          }
        }
      }
    },
    "/telemetry/export": {
      "post": {
        "summary": "Trigger telemetry warehouse export",
        "tags": ["Telemetry"],
        "security": [
          { "bearerAuth": [] }
        ],
        "responses": {
          "202": {
            "description": "Telemetry export started",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TelemetryExportSummary"
                }
              }
            }
          },
          "200": {
            "description": "No telemetry events pending export",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TelemetryExportSummary"
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "503": {
            "description": "Telemetry export disabled"
          }
        }
      }
    },
    "/analytics/bi/executive-overview": {
      "get": {
        "summary": "Executive analytics overview",
        "description": "Returns aggregated KPIs, trends, and telemetry health indicators for the executive dashboard.",
        "tags": ["Analytics"],
        "security": [
          { "bearerAuth": [] }
        ],
        "parameters": [
          {
            "name": "range",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["7d", "14d", "30d", "90d"],
              "default": "30d"
            },
            "description": "Time window used when calculating KPI deltas and trend lines."
          }
        ],
        "responses": {
          "200": {
            "description": "Executive overview generated",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/StandardResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/BiExecutiveOverview"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid token"
          },
          "403": {
            "description": "Insufficient permissions"
          }
        }
      }
    }
  }
}