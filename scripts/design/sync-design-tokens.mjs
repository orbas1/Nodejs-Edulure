#!/usr/bin/env node

import { readFile, writeFile, mkdir } from 'node:fs/promises';
import path from 'node:path';
import { fileURLToPath } from 'node:url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const repoRoot = path.resolve(__dirname, '..');

const cssPath = path.resolve(repoRoot, '../frontend-reactjs/src/styles/tokens.css');
const generatedAt = new Date().toISOString();

const cssContent = await readFile(cssPath, 'utf8');
const tokenPattern = /--([a-z0-9-]+)\s*:\s*([^;]+);/giu;
const tokens = {};
let match;
while ((match = tokenPattern.exec(cssContent)) !== null) {
  const [, name, value] = match;
  const trimmed = value.trim();
  if (name && trimmed.length) {
    tokens[name] = trimmed;
  }
}

const payload = {
  generatedAt,
  tokens
};

async function writeJson(relativePath) {
  const destination = path.resolve(repoRoot, '..', relativePath);
  await mkdir(path.dirname(destination), { recursive: true });
  await writeFile(destination, `${JSON.stringify(payload, null, 2)}\n`, 'utf8');
}

function escapeDartString(value) {
  return value.replace(/\\/g, '\\\\').replace(/'/g, "\\'");
}

function buildDartMapEntries() {
  return Object.entries(tokens)
    .map(([key, value]) => `    '${key}': '${escapeDartString(value)}',`)
    .join('\n');
}

function buildTypeScriptModule() {
  const lines = [
    '/* eslint-disable */',
    '// This file is generated by scripts/design/sync-design-tokens.mjs.',
    `export const designTokens = ${JSON.stringify(tokens, null, 2)} as const;`,
    '',
    'export type DesignTokenName = keyof typeof designTokens;',
    '',
    'export function getDesignToken(name: DesignTokenName): string {',
    '  return designTokens[name];',
    '}',
    '',
    `export const designTokensGeneratedAt = '${generatedAt}';`,
    ''
  ];
  return `${lines.join('\n')}\n`;
}

function buildDartModule() {
  const content = `// GENERATED FILE - DO NOT EDIT DIRECTLY.\n// Generated by scripts/design/sync-design-tokens.mjs on ${generatedAt}.\nimport 'package:flutter/material.dart';\n\nclass DesignTokens {\n  static const Map<String, String> raw = <String, String>{\n${buildDartMapEntries()}\n  };\n\n  static String? value(String token) => raw[token];\n\n  static Color color(String token, {Color fallback = Colors.transparent}) {\n    final rawValue = value(token);\n    if (rawValue == null) {\n      return fallback;\n    }\n    final trimmed = rawValue.trim();\n    final hexMatch = RegExp(r'^#([0-9a-fA-F]{6}|[0-9a-fA-F]{8})$').firstMatch(trimmed);\n    if (hexMatch != null) {\n      final hex = hexMatch.group(1)!;\n      final resolved = hex.length == 6 ? 'FF$hex' : hex;\n      return Color(int.parse('0x$resolved'));\n    }\n    return fallback;\n  }\n\n  static double spacing(String token, {double fallback = 0}) {\n    final rawValue = value(token);\n    if (rawValue == null) {\n      return fallback;\n    }\n    final trimmed = rawValue.trim();\n    if (trimmed.endsWith('rem')) {\n      final number = double.tryParse(trimmed.substring(0, trimmed.length - 3));\n      if (number != null) {\n        return number * 16;\n      }\n    }\n    if (trimmed.endsWith('px')) {\n      final number = double.tryParse(trimmed.substring(0, trimmed.length - 2));\n      if (number != null) {\n        return number;\n      }\n    }\n    final parsed = double.tryParse(trimmed);\n    return parsed ?? fallback;\n  }\n\n  static Duration duration(String token, {Duration fallback = Duration.zero}) {\n    final rawValue = value(token);\n    if (rawValue == null) {\n      return fallback;\n    }\n    final trimmed = rawValue.trim().toLowerCase();\n    if (trimmed.endsWith('ms')) {\n      final number = double.tryParse(trimmed.substring(0, trimmed.length - 2));\n      if (number != null) {\n        return Duration(milliseconds: number.round());\n      }\n    }\n    if (trimmed.endsWith('s')) {\n      final number = double.tryParse(trimmed.substring(0, trimmed.length - 1));\n      if (number != null) {\n        return Duration(milliseconds: (number * 1000).round());\n      }\n    }\n    return fallback;\n  }\n}\n`;
  return content;
}

await writeJson('docs/design-system/generated/tokens.json');
await writeFile(
  path.resolve(repoRoot, '../sdk-typescript/src/runtime/designTokens.ts'),
  buildTypeScriptModule(),
  'utf8'
);
await writeFile(
  path.resolve(repoRoot, '../Edulure-Flutter/lib/core/design_tokens.dart'),
  `${buildDartModule()}\n`,
  'utf8'
);

console.log(`Design tokens synced (${Object.keys(tokens).length} tokens).`);
