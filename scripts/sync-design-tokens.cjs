#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

const repoRoot = path.resolve(__dirname, '..');
const tokensPath = path.join(repoRoot, 'docs', 'design-system', 'design_tokens.json');
const cssOutputPath = path.join(repoRoot, 'frontend-reactjs', 'src', 'styles', 'tokens.css');
const dartOutputPath = path.join(repoRoot, 'Edulure-Flutter', 'lib', 'core', 'design_tokens.dart');

const tokens = JSON.parse(fs.readFileSync(tokensPath, 'utf8'));

const headerComment = `/*
 * -----------------------------------------------------------------------------
 *  This file is generated by scripts/sync-design-tokens.cjs.
 *  Do not edit directly â€“ update docs/design-system/design_tokens.json instead.
 * -----------------------------------------------------------------------------
 */\n`;

function cssBlock(selector, declarations, indentLevel = 0) {
  const indent = '  '.repeat(indentLevel);
  const innerIndent = '  '.repeat(indentLevel + 1);
  const lines = Object.entries(declarations)
    .map(([key, value]) => `${innerIndent}${key}: ${value};`)
    .join('\n');
  return `${indent}${selector} {\n${lines}\n${indent}}\n`;
}

function buildCss(json) {
  const parts = [headerComment, cssBlock(':root', json.base || {}) + '\n'];

  const overrides = json.overrides || {};
  for (const [atRule, selectorMap] of Object.entries(overrides)) {
    parts.push(`${atRule} {\n`);
    for (const [selector, declarations] of Object.entries(selectorMap)) {
      parts.push(cssBlock(selector, declarations, 1) + '\n');
    }
    parts.push('}\n\n');
  }

  const dataOverrides = json.dataOverrides || {};
  for (const [selector, declarations] of Object.entries(dataOverrides)) {
    parts.push(cssBlock(selector, declarations) + '\n');
  }

  return parts.join('').trimEnd() + '\n';
}

function toCamelCase(token) {
  return token.replace(/^--/, '').replace(/-([a-z0-9])/g, (_, char) => char.toUpperCase());
}

function withPrefix(name, prefix) {
  if (!prefix) {
    return name;
  }
  return prefix + name.charAt(0).toUpperCase() + name.slice(1);
}

function formatDouble(num) {
  const fixed = Number(num.toFixed(4));
  if (Number.isInteger(fixed)) {
    return `${fixed.toFixed(1)}`;
  }
  return `${fixed}`;
}

function parseNumeric(raw) {
  const trimmed = raw.trim();
  if (/^-?\d+(?:\.\d+)?rem$/i.test(trimmed)) {
    return formatDouble(parseFloat(trimmed.replace(/rem/i, '')) * 16);
  }
  if (/^-?\d+(?:\.\d+)?px$/i.test(trimmed)) {
    return formatDouble(parseFloat(trimmed.replace(/px/i, '')));
  }
  if (/^-?\d+(?:\.\d+)?\s*\/\s*-?\d+(?:\.\d+)?$/.test(trimmed)) {
    const [numerator, denominator] = trimmed.split('/').map((segment) => parseFloat(segment.trim()));
    return formatDouble(numerator / denominator);
  }
  if (/^-?\d+(?:\.\d+)?$/.test(trimmed)) {
    return formatDouble(parseFloat(trimmed));
  }
  return null;
}

function parseTokenValue(key, rawValue) {
  if (!key.startsWith('--')) {
    return null;
  }

  if (typeof rawValue === 'number') {
    return { type: 'double', value: formatDouble(rawValue) };
  }

  const value = String(rawValue).trim();
  if (/^#([0-9a-f]{6})$/i.test(value)) {
    return { type: 'color', value: `Color(0xFF${value.slice(1).toUpperCase()})` };
  }

  const rgbaMatch = value.match(/^rgba?\(([^)]+)\)$/i);
  if (rgbaMatch) {
    const parts = rgbaMatch[1].split(',').map((segment) => segment.trim());
    const [r, g, b] = parts;
    const alpha = parts[3] !== undefined ? parseFloat(parts[3]) : 1;
    return { type: 'color', value: `Color.fromRGBO(${parseInt(r, 10)}, ${parseInt(g, 10)}, ${parseInt(b, 10)}, ${alpha})` };
  }

  if (/^cubic-bezier\(([^)]+)\)$/i.test(value)) {
    const [x1, y1, x2, y2] = value
      .replace(/cubic-bezier\(|\)/gi, '')
      .split(',')
      .map((segment) => Number(segment.trim()));
    return { type: 'cubic', value: `Cubic(${x1}, ${y1}, ${x2}, ${y2})` };
  }

  if (/^\d+ms$/i.test(value)) {
    const ms = parseInt(value.replace(/ms/i, ''), 10);
    return { type: 'duration', value: `Duration(milliseconds: ${ms})` };
  }

  const numeric = parseNumeric(value);
  if (numeric !== null) {
    return { type: 'double', value: numeric };
  }

  return { type: 'string', value: `'${value.replace(/\\/g, '\\\\').replace(/'/g, "\\'")}'` };
}

function transformTokens(map, prefix = '') {
  const results = [];
  for (const [key, rawValue] of Object.entries(map)) {
    const parsed = parseTokenValue(key, rawValue);
    if (!parsed) {
      continue;
    }
    const camel = toCamelCase(key);
    const name = withPrefix(camel, prefix);
    results.push({ name, ...parsed });
  }
  return results;
}

function buildDart(json) {
  const imports = "import 'package:flutter/material.dart';\n\n";
  const baseTokens = transformTokens(json.base || {});
  const darkTokens = transformTokens(((json.overrides || {})['@media (prefers-color-scheme: dark)'] || {})[':root'] || {}, 'dark');
  const contrastTokens = transformTokens(((json.overrides || {})['@media (prefers-contrast: more)'] || {})[':root'] || {}, 'contrast');

  const lines = [
    '// GENERATED CODE - DO NOT MODIFY BY HAND.',
    '// Generated by scripts/sync-design-tokens.cjs from docs/design-system/design_tokens.json.',
    imports,
    'class DesignTokens {',
    '  DesignTokens._();',
  ];

  function pushConst({ name, type, value }) {
    let dartType = type;
    if (type === 'color') {
      dartType = 'Color';
    } else if (type === 'double') {
      dartType = 'double';
    } else if (type === 'duration') {
      dartType = 'Duration';
    } else if (type === 'cubic') {
      dartType = 'Cubic';
    } else if (type === 'string') {
      dartType = 'String';
    }
    lines.push(`  static const ${dartType} ${name} = ${value};`);
  }

  [...baseTokens, ...darkTokens, ...contrastTokens].forEach((token) => pushConst(token));

  lines.push('', '  static ThemeData lightTheme(TextTheme textTheme) {');
  lines.push('    return ThemeData(');
  lines.push('      colorScheme: ColorScheme(');
  lines.push('        brightness: Brightness.light,');
  lines.push('        primary: colorPrimary,');
  lines.push('        onPrimary: Colors.white,');
  lines.push('        secondary: colorEmerald,');
  lines.push('        onSecondary: Colors.white,');
  lines.push('        surface: colorSurface,');
  lines.push('        onSurface: colorText,');
  lines.push('        background: colorSurfaceMuted,');
  lines.push('        onBackground: colorText,');
  lines.push('        error: colorRose,');
  lines.push('        onError: Colors.white,');
  lines.push('      ),');
  lines.push('      scaffoldBackgroundColor: colorSurface,');
  lines.push('      textTheme: textTheme,');
  lines.push('      useMaterial3: true,');
  lines.push('      inputDecorationTheme: InputDecorationTheme(');
  lines.push('        filled: true,');
  lines.push('        fillColor: formFieldSurface,');
  lines.push('        contentPadding: EdgeInsets.symmetric(');
  lines.push('          horizontal: formFieldPaddingX,');
  lines.push('          vertical: formFieldPaddingY,');
  lines.push('        ),');
  lines.push('        enabledBorder: OutlineInputBorder(');
  lines.push('          borderRadius: BorderRadius.circular(radiusLg),');
  lines.push('          borderSide: BorderSide(color: formFieldBorder),');
  lines.push('        ),');
  lines.push('        focusedBorder: OutlineInputBorder(');
  lines.push('          borderRadius: BorderRadius.circular(radiusLg),');
  lines.push('          borderSide: BorderSide(color: formFieldBorderStrong),');
  lines.push('        ),');
  lines.push('      ),');
  lines.push('      elevatedButtonTheme: ElevatedButtonThemeData(');
  lines.push('        style: ElevatedButton.styleFrom(');
  lines.push('          padding: EdgeInsets.symmetric(');
  lines.push('            horizontal: space6,');
  lines.push('            vertical: space3,');
  lines.push('          ),');
  lines.push('          shape: RoundedRectangleBorder(');
  lines.push('            borderRadius: BorderRadius.circular(radiusXl),');
  lines.push('          ),');
  lines.push('        ),');
  lines.push('      ),');
  lines.push('    );');
  lines.push('  }', '');

  lines.push('  static ThemeData darkTheme(TextTheme textTheme) {');
  lines.push('    return ThemeData(');
  lines.push('      colorScheme: ColorScheme(');
  lines.push('        brightness: Brightness.dark,');
  lines.push('        primary: colorPrimary,');
  lines.push('        onPrimary: Colors.white,');
  lines.push('        secondary: colorEmerald,');
  lines.push('        onSecondary: Colors.white,');
  lines.push('        surface: darkColorSurface,');
  lines.push('        onSurface: darkColorText,');
  lines.push('        background: darkColorSurfaceMuted,');
  lines.push('        onBackground: darkColorText,');
  lines.push('        error: colorRose,');
  lines.push('        onError: Colors.white,');
  lines.push('      ),');
  lines.push('      scaffoldBackgroundColor: darkColorSurface,');
  lines.push('      textTheme: textTheme,');
  lines.push('      useMaterial3: true,');
  lines.push('      inputDecorationTheme: InputDecorationTheme(');
  lines.push('        filled: true,');
  lines.push('        fillColor: darkFormFieldSurface,');
  lines.push('        contentPadding: EdgeInsets.symmetric(');
  lines.push('          horizontal: formFieldPaddingX,');
  lines.push('          vertical: formFieldPaddingY,');
  lines.push('        ),');
  lines.push('        enabledBorder: OutlineInputBorder(');
  lines.push('          borderRadius: BorderRadius.circular(radiusLg),');
  lines.push('          borderSide: BorderSide(color: darkFormFieldBorder),');
  lines.push('        ),');
  lines.push('        focusedBorder: OutlineInputBorder(');
  lines.push('          borderRadius: BorderRadius.circular(radiusLg),');
  lines.push('          borderSide: BorderSide(color: darkFormFieldBorderStrong),');
  lines.push('        ),');
  lines.push('      ),');
  lines.push('    );');
  lines.push('  }', '');

  lines.push('  static ThemeData highContrastTheme(TextTheme textTheme) {');
  lines.push('    return ThemeData(');
  lines.push('      colorScheme: ColorScheme(');
  lines.push('        brightness: Brightness.light,');
  lines.push('        primary: contrastColorPrimary,');
  lines.push('        onPrimary: Colors.white,');
  lines.push('        secondary: colorEmerald,');
  lines.push('        onSecondary: Colors.white,');
  lines.push('        surface: contrastColorSurface,');
  lines.push('        onSurface: contrastColorText,');
  lines.push('        background: contrastColorSurfaceMuted,');
  lines.push('        onBackground: contrastColorText,');
  lines.push('        error: colorRose,');
  lines.push('        onError: Colors.white,');
  lines.push('      ),');
  lines.push('      scaffoldBackgroundColor: contrastColorSurface,');
  lines.push('      textTheme: textTheme.apply(bodyColor: contrastColorText, displayColor: contrastColorText),');
  lines.push('      useMaterial3: true,');
  lines.push('      elevatedButtonTheme: ElevatedButtonThemeData(');
  lines.push('        style: ElevatedButton.styleFrom(');
  lines.push('          padding: EdgeInsets.symmetric(');
  lines.push('            horizontal: space6,');
  lines.push('            vertical: space3,');
  lines.push('          ),');
  lines.push('          shape: RoundedRectangleBorder(');
  lines.push('            borderRadius: BorderRadius.circular(radiusXl),');
  lines.push('          ),');
  lines.push('        ),');
  lines.push('      ),');
  lines.push('    );');
  lines.push('  }');

  lines.push('}');

  return lines.join('\n') + '\n';
}

fs.writeFileSync(cssOutputPath, buildCss(tokens));
fs.mkdirSync(path.dirname(dartOutputPath), { recursive: true });
fs.writeFileSync(dartOutputPath, buildDart(tokens));

console.log('Design tokens synced to CSS and Flutter outputs.');
