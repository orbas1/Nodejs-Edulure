#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

const repoRoot = path.resolve(__dirname, '..');
const scorecardPath = path.join(repoRoot, 'valuation', 'stakeholder_scorecard.json');
const strategyDocPath = path.join(repoRoot, 'docs', 'operations', 'strategy.md');
const scorecardFragmentPath = path.join(repoRoot, 'valuation', 'generated-scorecard.md');

const data = JSON.parse(fs.readFileSync(scorecardPath, 'utf8'));

function formatValue(value, unit) {
  if (unit === 'ratio') {
    return `${Math.round(value * 100)}%`;
  }
  if (unit === 'gbp') {
    return `£${value.toFixed(2)}`;
  }
  if (unit === 'minutes') {
    return `${value.toFixed(1)} min`;
  }
  if (unit === 'days') {
    return `${value.toFixed(1)} days`;
  }
  if (unit === 'score' || unit === 'index') {
    return value.toFixed(2);
  }
  return String(value);
}

function buildScorecardTable() {
  const rows = [];
  rows.push('| Pillar | KPI | Baseline | Target | Owner | Cadence | Source |');
  rows.push('| --- | --- | --- | --- | --- | --- | --- |');
  for (const pillar of data.pillars) {
    for (const metric of pillar.metrics) {
      rows.push(
        `| ${pillar.title} | ${metric.label} | ${formatValue(metric.baseline, metric.unit)} | ${formatValue(metric.target, metric.unit)} | ${metric.owner} | ${metric.cadence} | ${metric.source} |`
      );
    }
  }
  return rows.join('\n');
}

function buildPillarNarratives() {
  const sections = [];
  for (const pillar of data.pillars) {
    sections.push(`### ${pillar.title}`);
    sections.push(`${pillar.narrative}`);
    sections.push('');
    sections.push('**Metrics in focus**');
    for (const metric of pillar.metrics) {
      sections.push(
        `- ${metric.label} — baseline ${formatValue(metric.baseline, metric.unit)}, target ${formatValue(metric.target, metric.unit)} (owner: ${metric.owner}, cadence: ${metric.cadence}, source: ${metric.source}).`
      );
    }
    sections.push('');
  }
  return sections.join('\n');
}

function buildMilestonesTable() {
  const rows = [];
  rows.push('| Milestone | ETA | Stakeholders | Notes |');
  rows.push('| --- | --- | --- | --- |');
  for (const milestone of data.milestones) {
    rows.push(
      `| ${milestone.label} | ${milestone.eta} | ${milestone.stakeholders.join(', ')} | ${milestone.notes} |`
    );
  }
  return rows.join('\n');
}

function buildCommunicationTable() {
  const rows = [];
  rows.push('| Channel | Frequency | Audience | Focus |');
  rows.push('| --- | --- | --- | --- |');
  for (const cadence of data.communication.cadence) {
    rows.push(
      `| ${cadence.channel} | ${cadence.frequency} | ${cadence.audience} | ${cadence.focus} |`
    );
  }
  return rows.join('\n');
}

const strategyDoc = `# Strategy briefing — ${data.reportingWindow}

Generated by \`scripts/generate-strategy-brief.cjs\` using \`valuation/stakeholder_scorecard.json\`. Update the JSON to refresh this report.

## KPI scorecard
${buildScorecardTable()}

## Pillar narratives
${buildPillarNarratives()}

## Milestones
${buildMilestonesTable()}

## Communication cadence
${buildCommunicationTable()}

## Communication templates
${Object.entries(data.communication.templates)
  .map(([name, filePath]) => `- **${name}** — [${filePath}](${filePath})`)
  .join('\n')}
`;

fs.writeFileSync(strategyDocPath, strategyDoc.trim() + '\n');

const scorecardFragment = `## KPI scorecard — ${data.reportingWindow}

${buildScorecardTable()}
`;
fs.writeFileSync(scorecardFragmentPath, scorecardFragment.trim() + '\n');

console.log('Strategy brief generated.');
