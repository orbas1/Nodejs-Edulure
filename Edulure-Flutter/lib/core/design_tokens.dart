// GENERATED CODE - DO NOT MODIFY BY HAND.
// Generated by scripts/sync-design-tokens.cjs from docs/design-system/design_tokens.json.
import 'package:flutter/material.dart';


class DesignTokens {
  DesignTokens._();
  static const double screenXs = 360.0;
  static const double screenSm = 480.0;
  static const double screenMd = 768.0;
  static const double screenLg = 1024.0;
  static const double screenXl = 1280.0;
  static const double screen2xl = 1536.0;
  static const double space1 = 4.0;
  static const double space2 = 8.0;
  static const double space3 = 12.0;
  static const double space4 = 16.0;
  static const double space5 = 20.0;
  static const double space6 = 24.0;
  static const double space8 = 32.0;
  static const double space10 = 40.0;
  static const double space12 = 48.0;
  static const double space16 = 64.0;
  static const String fontFamilySans = '\'Inter\', ui-sans-serif, system-ui';
  static const double fontSizeRoot = 16.0;
  static const double lineHeightBase = 1.5;
  static const Color colorSurface = Color(0xFFFFFFFF);
  static const Color colorSurfaceMuted = Color(0xFFF8FAFC);
  static const Color colorSurfaceSubtle = Color(0xFFF1F5F9);
  static const Color colorBorder = Color.fromRGBO(15, 23, 42, 0.12);
  static const Color colorText = Color(0xFF0F172A);
  static const Color colorTextMuted = Color(0xFF475569);
  static const Color colorTextSubtle = Color(0xFF64748B);
  static const Color colorPrimary = Color(0xFF2D62FF);
  static const Color colorPrimaryDark = Color(0xFF1F3BB3);
  static const Color colorPrimarySoft = Color(0xFFDBE4FF);
  static const Color colorEmerald = Color(0xFF10B981);
  static const Color colorAmber = Color(0xFFF59E0B);
  static const Color colorRose = Color(0xFFF43F5E);
  static const double radiusLg = 20.0;
  static const double radiusXl = 32.0;
  static const double radiusXxl = 44.0;
  static const double radiusPill = 999.0;
  static const double uploadsProgressRadius = 12.0;
  static const String shadowCard = '0 24px 60px -30px rgba(15, 23, 42, 0.18)';
  static const String shadowCardStrong = '0 32px 84px -36px rgba(15, 23, 42, 0.32)';
  static const String shadowMedia = '0 40px 120px -48px rgba(15, 23, 42, 0.42)';
  static const String shadowCta = '0 22px 52px -26px rgba(79, 70, 229, 0.7)';
  static const String gradientHero = 'linear-gradient(135deg, #0f172a 0%, #1e1b4b 52%, #111827 100%)';
  static const String gradientMarketing = 'linear-gradient(160deg, rgba(15, 23, 42, 0.98) 0%, rgba(30, 64, 175, 0.92) 65%, rgba(15, 23, 42, 0.96) 100%)';
  static const String gradientCta = 'linear-gradient(135deg, #4338ca 0%, #6366f1 55%, #7c3aed 100%)';
  static const String gradientCtaHover = 'linear-gradient(135deg, #3730a3 0%, #4f46e5 55%, #6d28d9 100%)';
  static const Duration motionDurationFast = Duration(milliseconds: 120);
  static const Duration motionDurationMedium = Duration(milliseconds: 220);
  static const Cubic motionEasingStandard = Cubic(0.16, 1, 0.3, 1);
  static const double mediaThumbAspect = 1.6;
  static const double mediaThumbRadius = 44.0;
  static const Color skeletonBase = Color(0xFFE2E8F0);
  static const Color skeletonHighlight = Color(0xFFF8FAFC);
  static const Color formFieldSurface = Color(0xFFFFFFFF);
  static const Color formFieldSurfaceFocus = Color(0xFFF8FBFF);
  static const Color formFieldBorder = Color.fromRGBO(148, 163, 184, 0.45);
  static const Color formFieldBorderStrong = Color.fromRGBO(79, 70, 229, 0.45);
  static const String formFieldShadow = '0 18px 45px -28px rgba(15, 23, 42, 0.35)';
  static const double formFieldPaddingX = 20.0;
  static const double formFieldPaddingY = 14.0;
  static const String formLabelLetterspacing = '0.025em';
  static const String shadowFocusRing = '0 0 0 3px rgba(45, 98, 255, 0.35)';
  static const Color overlayBackdrop = Color.fromRGBO(15, 23, 42, 0.6);
  static const double gridMinColumn = 288.0;
  static const String gridGap = 'var(--space-6)';
  static const Color darkColorSurface = Color(0xFF0F172A);
  static const Color darkColorSurfaceMuted = Color(0xFF111C33);
  static const Color darkColorSurfaceSubtle = Color(0xFF17284A);
  static const Color darkColorBorder = Color.fromRGBO(226, 232, 240, 0.2);
  static const Color darkColorText = Color(0xFFE2E8F0);
  static const Color darkColorTextMuted = Color(0xFFCBD5F5);
  static const Color darkColorTextSubtle = Color(0xFFA5B4FC);
  static const Color darkColorPrimarySoft = Color.fromRGBO(45, 98, 255, 0.24);
  static const Color darkOverlayBackdrop = Color.fromRGBO(15, 23, 42, 0.75);
  static const String darkShadowCard = '0 24px 60px -30px rgba(15, 23, 42, 0.4)';
  static const String darkShadowCardStrong = '0 32px 84px -36px rgba(15, 23, 42, 0.6)';
  static const String darkShadowMedia = '0 40px 120px -48px rgba(15, 23, 42, 0.6)';
  static const String darkShadowCta = '0 22px 52px -26px rgba(99, 102, 241, 0.75)';
  static const String darkGradientHero = 'linear-gradient(135deg, #0b1120 0%, #1e1b4b 60%, #111827 100%)';
  static const String darkGradientMarketing = 'linear-gradient(160deg, rgba(15, 23, 42, 1) 0%, rgba(30, 64, 175, 0.92) 55%, rgba(15, 23, 42, 0.96) 100%)';
  static const String darkGradientCta = 'linear-gradient(135deg, #4338ca 0%, #4f46e5 55%, #7c3aed 100%)';
  static const String darkGradientCtaHover = 'linear-gradient(135deg, #3730a3 0%, #4338ca 55%, #6d28d9 100%)';
  static const Color darkFormFieldSurface = Color.fromRGBO(15, 23, 42, 0.8);
  static const Color darkFormFieldSurfaceFocus = Color.fromRGBO(30, 58, 138, 0.9);
  static const Color darkFormFieldBorder = Color.fromRGBO(148, 163, 184, 0.35);
  static const Color darkFormFieldBorderStrong = Color.fromRGBO(129, 140, 248, 0.55);
  static const String darkFormFieldShadow = '0 22px 60px -34px rgba(15, 23, 42, 0.8)';
  static const Color darkSkeletonBase = Color.fromRGBO(148, 163, 184, 0.35);
  static const Color darkSkeletonHighlight = Color.fromRGBO(226, 232, 240, 0.35);
  static const Color contrastColorSurface = Color(0xFFFFFFFF);
  static const Color contrastColorSurfaceMuted = Color(0xFFFFFFFF);
  static const Color contrastColorSurfaceSubtle = Color(0xFFF8FAFC);
  static const Color contrastColorBorder = Color.fromRGBO(15, 23, 42, 0.4);
  static const Color contrastColorText = Color(0xFF0B1120);
  static const Color contrastColorTextMuted = Color(0xFF111C33);
  static const Color contrastColorTextSubtle = Color(0xFF1E293B);
  static const Color contrastColorPrimary = Color(0xFF1D4ED8);
  static const Color contrastColorPrimaryDark = Color(0xFF1E3A8A);
  static const Color contrastColorPrimarySoft = Color(0xFFC7D2FE);

  static ThemeData lightTheme(TextTheme textTheme) {
    return ThemeData(
      colorScheme: ColorScheme(
        brightness: Brightness.light,
        primary: colorPrimary,
        onPrimary: Colors.white,
        secondary: colorEmerald,
        onSecondary: Colors.white,
        surface: colorSurface,
        onSurface: colorText,
        background: colorSurfaceMuted,
        onBackground: colorText,
        error: colorRose,
        onError: Colors.white,
      ),
      scaffoldBackgroundColor: colorSurface,
      textTheme: textTheme,
      useMaterial3: true,
      inputDecorationTheme: InputDecorationTheme(
        filled: true,
        fillColor: formFieldSurface,
        contentPadding: EdgeInsets.symmetric(
          horizontal: formFieldPaddingX,
          vertical: formFieldPaddingY,
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(radiusLg),
          borderSide: BorderSide(color: formFieldBorder),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(radiusLg),
          borderSide: BorderSide(color: formFieldBorderStrong),
        ),
      ),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          padding: EdgeInsets.symmetric(
            horizontal: space6,
            vertical: space3,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(radiusXl),
          ),
        ),
      ),
    );
  }

  static ThemeData darkTheme(TextTheme textTheme) {
    return ThemeData(
      colorScheme: ColorScheme(
        brightness: Brightness.dark,
        primary: colorPrimary,
        onPrimary: Colors.white,
        secondary: colorEmerald,
        onSecondary: Colors.white,
        surface: darkColorSurface,
        onSurface: darkColorText,
        background: darkColorSurfaceMuted,
        onBackground: darkColorText,
        error: colorRose,
        onError: Colors.white,
      ),
      scaffoldBackgroundColor: darkColorSurface,
      textTheme: textTheme,
      useMaterial3: true,
      inputDecorationTheme: InputDecorationTheme(
        filled: true,
        fillColor: darkFormFieldSurface,
        contentPadding: EdgeInsets.symmetric(
          horizontal: formFieldPaddingX,
          vertical: formFieldPaddingY,
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(radiusLg),
          borderSide: BorderSide(color: darkFormFieldBorder),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(radiusLg),
          borderSide: BorderSide(color: darkFormFieldBorderStrong),
        ),
      ),
    );
  }

  static ThemeData highContrastTheme(TextTheme textTheme) {
    return ThemeData(
      colorScheme: ColorScheme(
        brightness: Brightness.light,
        primary: contrastColorPrimary,
        onPrimary: Colors.white,
        secondary: colorEmerald,
        onSecondary: Colors.white,
        surface: contrastColorSurface,
        onSurface: contrastColorText,
        background: contrastColorSurfaceMuted,
        onBackground: contrastColorText,
        error: colorRose,
        onError: Colors.white,
      ),
      scaffoldBackgroundColor: contrastColorSurface,
      textTheme: textTheme.apply(bodyColor: contrastColorText, displayColor: contrastColorText),
      useMaterial3: true,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          padding: EdgeInsets.symmetric(
            horizontal: space6,
            vertical: space3,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(radiusXl),
          ),
        ),
      ),
    );
  }
}
